<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>推荐使用 Struct 而非 Hash 存储结构化数据</title>
      <link href="/tui-jian-shi-yong-struct-er-fei-hash-cun-chu-jie-gou-hua-shu-ju/"/>
      <url>/tui-jian-shi-yong-struct-er-fei-hash-cun-chu-jie-gou-hua-shu-ju/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在处理结构化数据时，如果创建一个新类不那么合适时，推荐使用 <code>Struct</code> 而非 <code>Hash</code> </p><p>将 <code>Struct::new</code> 的返回值赋给常量，并像类一样使用它。</p></blockquote><pre class=" language-ruby"><code class="language-ruby"><span class="token comment" spellcheck="true"># Hash</span>reading <span class="token operator">=</span> <span class="token punctuation">{</span> date<span class="token punctuation">:</span> <span class="token string">"2018-10-30"</span><span class="token punctuation">,</span> high<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> low<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">mean</span><span class="token punctuation">(</span>reading<span class="token punctuation">)</span>  <span class="token punctuation">(</span>reading<span class="token punctuation">[</span><span class="token symbol">:high</span><span class="token punctuation">]</span> <span class="token operator">+</span> reading<span class="token punctuation">[</span><span class="token symbol">:low</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token keyword">end</span><span class="token function">mean</span><span class="token punctuation">(</span>reading<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#=> 25.0</span><span class="token comment" spellcheck="true"># Struct</span><span class="token constant">Reading</span> <span class="token operator">=</span> <span class="token builtin">Struct</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token symbol">:date</span><span class="token punctuation">,</span> <span class="token symbol">:high</span><span class="token punctuation">,</span> <span class="token symbol">:low</span><span class="token punctuation">)</span> <span class="token keyword">do</span>  <span class="token keyword">def</span> <span class="token function">mean</span>    <span class="token punctuation">(</span>high <span class="token operator">+</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span>  <span class="token keyword">end</span><span class="token keyword">end</span><span class="token constant">Reading</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">"2018-10-30"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean <span class="token comment" spellcheck="true">#=> 25.0</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>留神，常量是可变的</title>
      <link href="/liu-shen-chang-liang-shi-ke-bian-de/"/>
      <url>/liu-shen-chang-liang-shi-ke-bian-de/</url>
      
        <content type="html"><![CDATA[<blockquote><p>总是将常量冻结 <code>freeze</code>，从而防止其被改变。</p></blockquote><p>不使用 <code>freeze</code> ，常量可以修改。</p><pre class=" language-ruby"><code class="language-ruby"><span class="token constant">MY_CONSTANT</span> <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token constant">MY_CONSTANT</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token string">"bar"</span>puts <span class="token constant">MY_CONSTANT</span> <span class="token comment" spellcheck="true">#=> "foobar"</span></code></pre><p>使用 <code>freeze</code> ，常量无法修改。</p><pre class=" language-ruby"><code class="language-ruby"><span class="token constant">MY_CONSTANT</span> <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">.</span>freeze<span class="token constant">MY_CONSTANT</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token string">"bar"</span> <span class="token comment" spellcheck="true">#=> FrozenError (can't modify frozen String)</span></code></pre><blockquote><p>如果常量引用了一个集合对象比如数组或散列，那么冻结整个集合及其所有元素。</p></blockquote><p>这个 <code>tip</code> 已经落伍，在 <code>Ruby 2.2</code> 及后续版本会自动冻结整个集合及其所有元素。</p><pre class=" language-ruby"><code class="language-ruby"><span class="token comment" spellcheck="true"># in Ruby >= 2.1</span><span class="token constant">NETWORKS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"192.168.1"</span><span class="token punctuation">,</span> <span class="token string">"192.168.2"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>freeze<span class="token constant">NETWORKS</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token string">"192.168.3"</span> <span class="token comment" spellcheck="true">#=> FrozenError (can't modify frozen Array)</span><span class="token constant">NETWORKS</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"192.168.3"</span> <span class="token comment" spellcheck="true">#=> FrozenError (can't modify frozen Array)</span>user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"name"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"name"</span> <span class="token punctuation">}</span><span class="token punctuation">.</span>freezeuser<span class="token punctuation">[</span><span class="token string">"email"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"email"</span> <span class="token comment" spellcheck="true">#=> FrozenError (can't modify frozen Hash)</span>user<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"name2"</span> <span class="token comment" spellcheck="true">#=> FrozenError (can't modify frozen Hash)</span></code></pre><blockquote><p>要防止常量被重新赋值，可以冻结定义它的那个模块。</p></blockquote><p>常量使用 <code>freeze</code>，<code>ruby</code> 出现 <code>warning</code> 但是依然能够被重新赋值。</p><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token constant">Defaults</span>  <span class="token constant">TIMEOUT</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">.</span>freeze<span class="token keyword">end</span><span class="token constant">Defaults</span><span class="token punctuation">:</span><span class="token symbol">:TIMEOUT</span> <span class="token operator">=</span> <span class="token number">6</span> <span class="token comment" spellcheck="true">#=> warning: already initialized constant Defaults::TIMEOUT</span><span class="token comment" spellcheck="true">#=> warning: previous definition of TIMEOUT was here</span>puts <span class="token constant">Defaults</span><span class="token punctuation">:</span><span class="token symbol">:TIMEOUT</span> <span class="token comment" spellcheck="true">#=> 6</span></code></pre><p>冻结模块后，常量无法赋值。</p><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token constant">Defaults</span>  <span class="token constant">TIMEOUT</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">end</span><span class="token constant">Defaults</span><span class="token punctuation">.</span>freeze<span class="token constant">Defaults</span><span class="token punctuation">:</span><span class="token symbol">:TIMEOUT</span> <span class="token operator">=</span> <span class="token number">6</span> <span class="token comment" spellcheck="true">#=> FrozenError (can't modify frozen Module)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ruby thread pool</title>
      <link href="/ruby-thread-pool/"/>
      <url>/ruby-thread-pool/</url>
      
        <content type="html"><![CDATA[<p>有时候会遇到一个情况需要在多个远程服务获取数据。例如服务 a 需要 2 秒，服务 b 需要 5 秒，按照正常处理总共就需要 2+5 总共 7 秒了。如果 a 和 b 之间并没有相互依赖关系，我们可以使用 thread pool 来并发获取数据，将总体耗时由 a + b 变为 a、b两者中的最大值。</p><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">require</span> <span class="token string">'thread/pool'</span><span class="token keyword">require</span> <span class="token string">'thread/future'</span><span class="token keyword">require</span> <span class="token string">'benchmark'</span><span class="token keyword">def</span> a  sleep <span class="token number">2</span>  <span class="token string">'a'</span><span class="token keyword">end</span><span class="token keyword">def</span> b  sleep <span class="token number">5</span>  <span class="token string">'b'</span><span class="token keyword">end</span><span class="token constant">Benchmark</span><span class="token punctuation">.</span>bmbm <span class="token keyword">do</span> <span class="token operator">|</span>x<span class="token operator">|</span>  x<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">"normal"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     puts <span class="token string">"<span class="token interpolation"><span class="token delimiter tag">#{</span>a<span class="token delimiter tag">}</span></span><span class="token interpolation"><span class="token delimiter tag">#{</span>b<span class="token delimiter tag">}</span></span>"</span>  <span class="token punctuation">}</span>  x<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">"Thread.future"</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     pool <span class="token operator">=</span> <span class="token builtin">Thread</span><span class="token punctuation">.</span>pool <span class="token number">2</span>    f1 <span class="token operator">=</span> pool<span class="token punctuation">.</span>future <span class="token punctuation">{</span>      a    <span class="token punctuation">}</span>    f2 <span class="token operator">=</span> pool<span class="token punctuation">.</span>future <span class="token punctuation">{</span>      b    <span class="token punctuation">}</span>    puts <span class="token string">"<span class="token interpolation"><span class="token delimiter tag">#{</span><span class="token operator">~</span>f1<span class="token delimiter tag">}</span></span><span class="token interpolation"><span class="token delimiter tag">#{</span><span class="token operator">~</span>f2<span class="token delimiter tag">}</span></span>"</span>  <span class="token punctuation">}</span><span class="token keyword">end</span></code></pre><p>使用 Benchmark 对比，和我们设想的完全一样。</p><pre><code>Rehearsal -------------------------------------------------normal        ab  0.000000   0.000000   0.000000 (  7.010414)Thread.future ab  0.000000   0.000000   0.000000 (  5.002781)---------------------------------------- total: 0.000000sec                    user     system      total        realnormal        ab  0.000000   0.000000   0.000000 (  7.004402)Thread.future ab  0.000000   0.000000   0.000000 (  5.003263)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ruby synchronized</title>
      <link href="/ruby-synchronized/"/>
      <url>/ruby-synchronized/</url>
      
        <content type="html"><![CDATA[<p>最近学习 <code>Java</code> 的时候了解到在 <code>Java</code> 中 <code>synchronized</code> 关键字可以保证代码块的串行执行。</p><p>在 <code>ruby</code> 开发中往往使用第三方来保证，比如使用数据库或文件系统。其实 <code>ruby</code> 也有类似的方式来保证代码块的串行执行，它就是 <code>Mutex</code> 的 <code>synchronize</code>。</p><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">require</span> <span class="token string">'thread'</span>semaphore <span class="token operator">=</span> <span class="token constant">Mutex</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token class-name">a</span> <span class="token operator">=</span> <span class="token builtin">Thread</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token punctuation">{</span>  semaphore<span class="token punctuation">.</span>synchronize <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># access shared resource</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>b <span class="token operator">=</span> <span class="token builtin">Thread</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token punctuation">{</span>  semaphore<span class="token punctuation">.</span>synchronize <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># access shared resource</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git 忽略文件</title>
      <link href="/git-hu-lue-wen-jian/"/>
      <url>/git-hu-lue-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>使用 <code>git</code> 时，经常需要忽略一些文件，比如一些 <code>IDE</code> 生成的配置文件<br>在项目目录加上 <code>.gitignore</code> 文件<br>然后加入需要忽略文件的文件名就可以了</p><pre><code>.project</code></pre><p>需要注意的是，如果需要忽略 <code>.gitignore</code> 文件，那么文件中就要加上 <code>.gitignore</code></p><pre><code>.project.gitignore</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript 变量声明提前</title>
      <link href="/javascript-bian-liang-sheng-ming-ti-qian/"/>
      <url>/javascript-bian-liang-sheng-ming-ti-qian/</url>
      
        <content type="html"><![CDATA[<p><code>JavaScript</code> 使用了函数作用域，变量在声明它们的函数体以及这个函数体嵌套的任意函数体内都是有定义的。到底是什么意思呢？我们来看下面这段代码: </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'global'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'local'</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>你可能认为输出是: </p><pre><code>global  local  </code></pre><p>但是运行一下你就会发现实际结果是: </p><pre><code>undefined  local  </code></pre><p>深入研究你会发现就算是你使用传递参数: </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'global'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'local'</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>实际结果依然是:   </p><pre><code>undefined  local  </code></pre><p>或者代码改写为: </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'global'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> scope<span class="token punctuation">;</span>  <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'local'</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>实际结果仍然是:   </p><pre><code>undefined  </code></pre><p>为什么，后面的代码能够影响到前面的代码？照成这种结果的原因的就是前面提到的函数作用域，在JS中上面的代码实际上是这样的: </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'global'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> scope<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'local'</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>JavaScript</code> 这个特性被非正式地称为声明提前，即函数里声明的所有变量都被提前至函数体的顶部，但是这个声明提前至声明却不赋值。<br>由于拥有这种特性，在编写代码时一些程序员特意将变量声明放在函数体的顶部，而不是像其他语言中让变量声明和使用变量的代码尽量靠近。<br>所以在函数体中使用到 <code>var</code> 来声明变量时，记得将声明和赋值语句放在函数体的顶部，避免因为这种特性造成变量值为 <code>undefined</code> 的 <code>BUG</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP 抽象工厂模式</title>
      <link href="/php-chou-xiang-gong-han-mo-shi/"/>
      <url>/php-chou-xiang-gong-han-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>抽象工厂模式 <code>Abstract Factory Pattern</code>，提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/* * 抽象工厂模式 * 提供一个接口， * 用于创建相关或依赖对象的家族， * 而不需要明确指定具体类。 */</span><span class="token comment" spellcheck="true">//定义比萨商店</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">PizzaStore</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">orderPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$Pizza</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">abstract</span> <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//纽约比萨店</span><span class="token keyword">class</span> <span class="token class-name">NYPizzaStore</span> <span class="token keyword">extends</span> <span class="token class-name">PizzaStore</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token variable">$PizzaIngredientFactory</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NYPizzaIngredientFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'cheese'</span> <span class="token operator">==</span> <span class="token variable">$type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheesePizza</span><span class="token punctuation">(</span><span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token string">'clam'</span> <span class="token operator">==</span> <span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClamPizza</span><span class="token punctuation">(</span><span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$Pizza</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//芝加哥比萨店</span><span class="token keyword">class</span> <span class="token class-name">ChicagoPizzaStore</span> <span class="token keyword">extends</span> <span class="token class-name">PizzaStore</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token variable">$PizzaIngredientFactory</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChicagoPizzaIngredientFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'cheese'</span> <span class="token operator">==</span> <span class="token variable">$type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheesePizza</span><span class="token punctuation">(</span><span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token string">'clam'</span> <span class="token operator">==</span> <span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClamPizza</span><span class="token punctuation">(</span><span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$Pizza</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//原料工厂接口</span><span class="token keyword">interface</span> <span class="token class-name">PizzaIngredientFactory</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createDough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createCheese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createVeggies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createPepperoni</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createClam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//纽约原料工厂</span><span class="token keyword">class</span> <span class="token class-name">NYPizzaIngredientFactory</span> <span class="token keyword">implements</span> <span class="token class-name">PizzaIngredientFactory</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createDough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NY createDough&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NY createSauce&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createCheese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NY createCheese&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createVeggies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NY createVeggies&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createPepperoni</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NY createPepperoni&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createClam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NY createClam&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//芝加哥原料工厂</span><span class="token keyword">class</span> <span class="token class-name">ChicagoPizzaIngredientFactory</span> <span class="token keyword">implements</span> <span class="token class-name">PizzaIngredientFactory</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createDough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Chicago createDough&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Chicago createSauce&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createCheese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Chicago createCheese&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createVeggies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Chicago createVeggies&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createPepperoni</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Chicago createPepperoni&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createClam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Chicago createClam&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//比萨类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>  <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'bake&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'cut&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'box&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//比萨1</span><span class="token keyword">class</span> <span class="token class-name">CheesePizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span> <span class="token operator">=</span> <span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//向原料工厂请求原料</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createDough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createCheese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//比萨2</span><span class="token keyword">class</span> <span class="token class-name">ClamPizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span> <span class="token operator">=</span> <span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//向原料工厂请求原料</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createDough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createCheese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createClam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$NYPizzaStore</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NYPizzaStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ChicagoPizzaStore</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChicagoPizzaStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$NYPizzaStore</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">orderPizza</span><span class="token punctuation">(</span><span class="token string">'cheese'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ChicagoPizzaStore</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">orderPizza</span><span class="token punctuation">(</span><span class="token string">'clam'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出:  </p><pre><code>NY createDough  NY createSauce  NY createCheese  bake  cut  box  Chicago createDough  Chicago createSauce  Chicago createCheese  Chicago createClam  bake  cut  box</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
