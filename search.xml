<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>在改变作为参数的集合之前复制它们</title>
      <link href="/zai-gai-bian-zuo-wei-can-shu-de-ji-he-zhi-qian-fu-zhi-ta-men/"/>
      <url>/zai-gai-bian-zuo-wei-can-shu-de-ji-he-zhi-qian-fu-zhi-ta-men/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>Ruby</code> 中参数是按引用传递的，而不是值传递。这个规则有一个例外值得注意：它不适用于 <code>Fixnum</code> 对象。</p><p>在改变集合之前先复制它们。</p></blockquote><p><code>Ruby</code> 语言自带了两个用来复制对象的方法：<code>dup</code> 和 <code>clone</code>。它们都会基于接收者创建新的对象，但是与 <code>dup</code> 方法不同的是，<code>clone</code> 方法会保留原始对象的两个附加特性。</p><p>首先，<code>clone</code> 方法会保留接收者的冻结状态。如果原始对象的状态是冻结的，那么生成的副本也是冻结的。而 <code>dup</code> 方法就不同了，它永远不会返回冻结的对象。</p><p>其次，如果接收者中存在单例方法，使用 <code>clone</code> 方法也会复制单例类。由于 <code>dup</code> 方法不会这样做，所以当使用 <code>dup</code> 方法时，原始对象和使用 <code>dup</code> 方法创建的副本对于相同消息的响应可能是不同的。</p><p>多数情况下应使用 <code>dup</code> 方法而不是 <code>clone</code> 方法，特别是当你希望修改结果对象时。冻结对象时无法修改或是解冻的，所以 <code>clone</code> 方法可能会返回一个不可变的对象。由于我们要去对新对象进行修改，因此 <code>dup</code> 方法显然是更合适的选择。</p><blockquote><p><code>dup</code> 方法和 <code>clone</code> 方法只会进行浅拷贝。</p></blockquote><p>复制传入集合是一种常见的模式。但要小心，使用这样的方法存在潜在的危险。你要知道 <code>dup</code> 方法和 <code>clone</code> 方法返回的是浅拷贝对象。对于像 <code>Array</code> 一样的集合，这意味着仅仅复制了容器本身而没有复制其中的元素。</p><p>可以在不影响原始集合的情况下增添或移除其中的元素，但修改元素本身则是有影响的。原始集合及其副本引用了相同的元素对象。修改任一元素都会影响到集合本身，同样也会影响到任何引用这一元素的对象。</p><pre class=" language-ruby"><code class="language-ruby">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Polar"</span><span class="token punctuation">]</span>b <span class="token operator">=</span> a<span class="token punctuation">.</span>dup <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token string">"Bear"</span><span class="token comment" spellcheck="true">#=> ["Polar", "Bear"]</span>b<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token punctuation">{</span><span class="token operator">|</span>x<span class="token operator">|</span> x<span class="token punctuation">.</span>sub<span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">'lar'</span><span class="token punctuation">,</span> <span class="token string">'oh'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#=> ["Pooh", "Bear"]</span>a<span class="token comment" spellcheck="true">#=> ["Pooh"]</span></code></pre><blockquote><p>对于多数对象来说，可以使用 <code>Marshal</code> 来完成深拷贝。</p></blockquote><p>可以使用 <code>Marshal</code> 类将一个集合及其所持有的元素序列化，然后再反序列化：</p><pre class=" language-ruby"><code class="language-ruby">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Monkey"</span><span class="token punctuation">,</span> <span class="token string">"Brains"</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token constant">Marshal</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token constant">Marshal</span><span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#=> ["Monkey", "Brains"]</span>b<span class="token punctuation">.</span><span class="token keyword">each</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token symbol">:upcase!</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#=> ["MONKEY", "BRAINS"]</span>a<span class="token comment" spellcheck="true">#=> ["Monkey", "Brains"]</span></code></pre><p>使用 <code>Marshal</code> 来解决这一问题这某种程度上有一定的局限性。抛开对对象序列化和反序列化的时间不说，你还得考虑这一过程中需要的内存。毫无疑问，对象的副本会持有其本身的内存空间，而使用 <code>Marshal::dump</code> 中序列化时创建的字节流也是会占用内存的。转储和加载大对象会使程序消耗大内存更多。</p><p>一个潜在的更加严峻的问题时并非所有对象都可以被 <code>Marshal</code> 序列化。那些持有闭包的对象以及那些具有单例方法的对象时无法被序列化的。<code>Ruby</code> 的一些核心类也是不能被 <code>Marshal</code> 序列化的。这包括 <code>IO</code> 以及 <code>File</code> 等类型。对于所有这样的情形，在使用 <code>Marshal::dump</code> 进行序列化时会抛出一个 <code>TypeError</code> 异常。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker 中 NGINX 挂载应用的静态文件</title>
      <link href="/docker-zhong-nginx-gua-zai-ying-yong-de-jing-tai-wen-jian/"/>
      <url>/docker-zhong-nginx-gua-zai-ying-yong-de-jing-tai-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>在 <code>Docker</code> 中 <code>NGINX</code> 如何获得应用的静态文件呢？</p><p>一般来说这种共享文件的需求，我们需要使用 <code>volumes</code></p><p>假如静态文件的地址是 <code>/home/app/app_name/public</code></p><p>那么我们在中 <code>docker-compose.yml</code> 中设置 <code>volumes</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">volumes</span><span class="token punctuation">:</span>    <span class="token key atrule">public</span><span class="token punctuation">:</span> <span class="token key atrule">services</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span>        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>             <span class="token punctuation">-</span> public<span class="token punctuation">:</span>/home/app/app_name/public  <span class="token key atrule">web</span><span class="token punctuation">:</span>        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>             <span class="token punctuation">-</span> public<span class="token punctuation">:</span>/home/app/app_name/public</code></pre><p>记得在 <code>nginx.conf</code> 设置 <code>root</code></p><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true"># define the public application root  </span>   <span class="token keyword">root</span>  <span class="token operator">/</span>home<span class="token operator">/</span>app<span class="token operator">/</span>app_name<span class="token operator">/</span>public<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul><li><a href="https://docs.docker.com/compose/compose-file/#volumes" target="_blank" rel="noopener">Compose file version 3 reference</a></li><li><a href="https://docs.docker.com/storage/volumes/#start-a-container-with-a-volume" target="_blank" rel="noopener">Use volumes</a></li><li><a href="https://stackoverflow.com/questions/42232051/docker-compose-volumes-from-equivalent-with-version-3" target="_blank" rel="noopener">docker-compose volumes_from equivalent with version 3</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Docker Compose </tag>
            
            <tag> NGINX </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>推荐使用 Struct 而非 Hash 存储结构化数据</title>
      <link href="/tui-jian-shi-yong-struct-er-fei-hash-cun-chu-jie-gou-hua-shu-ju/"/>
      <url>/tui-jian-shi-yong-struct-er-fei-hash-cun-chu-jie-gou-hua-shu-ju/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在处理结构化数据时，如果创建一个新类不那么合适时，推荐使用 <code>Struct</code> 而非 <code>Hash</code> </p><p>将 <code>Struct::new</code> 的返回值赋给常量，并像类一样使用它。</p></blockquote><pre class=" language-ruby"><code class="language-ruby"><span class="token comment" spellcheck="true"># Hash</span>reading <span class="token operator">=</span> <span class="token punctuation">{</span> date<span class="token punctuation">:</span> <span class="token string">"2018-10-30"</span><span class="token punctuation">,</span> high<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> low<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">mean</span><span class="token punctuation">(</span>reading<span class="token punctuation">)</span>  <span class="token punctuation">(</span>reading<span class="token punctuation">[</span><span class="token symbol">:high</span><span class="token punctuation">]</span> <span class="token operator">+</span> reading<span class="token punctuation">[</span><span class="token symbol">:low</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token keyword">end</span><span class="token function">mean</span><span class="token punctuation">(</span>reading<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#=> 25.0</span><span class="token comment" spellcheck="true"># Struct</span><span class="token constant">Reading</span> <span class="token operator">=</span> <span class="token builtin">Struct</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token symbol">:date</span><span class="token punctuation">,</span> <span class="token symbol">:high</span><span class="token punctuation">,</span> <span class="token symbol">:low</span><span class="token punctuation">)</span> <span class="token keyword">do</span>  <span class="token keyword">def</span> <span class="token function">mean</span>    <span class="token punctuation">(</span>high <span class="token operator">+</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span>  <span class="token keyword">end</span><span class="token keyword">end</span><span class="token constant">Reading</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">"2018-10-30"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean <span class="token comment" spellcheck="true">#=> 25.0</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>留神，常量是可变的</title>
      <link href="/liu-shen-chang-liang-shi-ke-bian-de/"/>
      <url>/liu-shen-chang-liang-shi-ke-bian-de/</url>
      
        <content type="html"><![CDATA[<blockquote><p>总是将常量冻结 <code>freeze</code>，从而防止其被改变。</p></blockquote><p>不使用 <code>freeze</code> ，常量可以修改。</p><pre class=" language-ruby"><code class="language-ruby"><span class="token constant">MY_CONSTANT</span> <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token constant">MY_CONSTANT</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token string">"bar"</span>puts <span class="token constant">MY_CONSTANT</span> <span class="token comment" spellcheck="true">#=> "foobar"</span></code></pre><p>使用 <code>freeze</code> ，常量无法修改。</p><pre class=" language-ruby"><code class="language-ruby"><span class="token constant">MY_CONSTANT</span> <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">.</span>freeze<span class="token constant">MY_CONSTANT</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token string">"bar"</span> <span class="token comment" spellcheck="true">#=> FrozenError (can't modify frozen String)</span></code></pre><blockquote><p>如果常量引用了一个集合对象比如数组或散列，那么冻结整个集合及其所有元素。</p></blockquote><p>这个 <code>tip</code> 已经落伍，在 <code>Ruby 2.2</code> 及后续版本会自动冻结整个集合及其所有元素。</p><pre class=" language-ruby"><code class="language-ruby"><span class="token comment" spellcheck="true"># in Ruby >= 2.1</span><span class="token constant">NETWORKS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"192.168.1"</span><span class="token punctuation">,</span> <span class="token string">"192.168.2"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>freeze<span class="token constant">NETWORKS</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token string">"192.168.3"</span> <span class="token comment" spellcheck="true">#=> FrozenError (can't modify frozen Array)</span><span class="token constant">NETWORKS</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"192.168.3"</span> <span class="token comment" spellcheck="true">#=> FrozenError (can't modify frozen Array)</span>user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"name"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"name"</span> <span class="token punctuation">}</span><span class="token punctuation">.</span>freezeuser<span class="token punctuation">[</span><span class="token string">"email"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"email"</span> <span class="token comment" spellcheck="true">#=> FrozenError (can't modify frozen Hash)</span>user<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"name2"</span> <span class="token comment" spellcheck="true">#=> FrozenError (can't modify frozen Hash)</span></code></pre><blockquote><p>要防止常量被重新赋值，可以冻结定义它的那个模块。</p></blockquote><p>常量使用 <code>freeze</code>，<code>ruby</code> 出现 <code>warning</code> 但是依然能够被重新赋值。</p><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token constant">Defaults</span>  <span class="token constant">TIMEOUT</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">.</span>freeze<span class="token keyword">end</span><span class="token constant">Defaults</span><span class="token punctuation">:</span><span class="token symbol">:TIMEOUT</span> <span class="token operator">=</span> <span class="token number">6</span> <span class="token comment" spellcheck="true">#=> warning: already initialized constant Defaults::TIMEOUT</span><span class="token comment" spellcheck="true">#=> warning: previous definition of TIMEOUT was here</span>puts <span class="token constant">Defaults</span><span class="token punctuation">:</span><span class="token symbol">:TIMEOUT</span> <span class="token comment" spellcheck="true">#=> 6</span></code></pre><p>冻结模块后，常量无法赋值。</p><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token constant">Defaults</span>  <span class="token constant">TIMEOUT</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">end</span><span class="token constant">Defaults</span><span class="token punctuation">.</span>freeze<span class="token constant">Defaults</span><span class="token punctuation">:</span><span class="token symbol">:TIMEOUT</span> <span class="token operator">=</span> <span class="token number">6</span> <span class="token comment" spellcheck="true">#=> FrozenError (can't modify frozen Module)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ruby thread pool</title>
      <link href="/ruby-thread-pool/"/>
      <url>/ruby-thread-pool/</url>
      
        <content type="html"><![CDATA[<p>有时候会遇到一个情况需要在多个远程服务获取数据。</p><p>例如服务 <code>a</code> 需要 <code>2</code> 秒，服务 <code>b</code> 需要 <code>5</code> 秒，按照正常处理总共就需要 <code>2+5</code> 总共 <code>7</code> 秒了。</p><p>如果 <code>a</code> 和 <code>b</code> 之间并没有相互依赖关系，我们可以使用 <code>thread pool</code> 来并发获取数据，将总体耗时由 <code>a + b</code> 降低到 <code>a、b</code> 两者中的最大值。</p><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">require</span> <span class="token string">'thread/pool'</span><span class="token keyword">require</span> <span class="token string">'thread/future'</span><span class="token keyword">require</span> <span class="token string">'benchmark'</span><span class="token keyword">def</span> a  sleep <span class="token number">2</span>  <span class="token string">'a'</span><span class="token keyword">end</span><span class="token keyword">def</span> b  sleep <span class="token number">5</span>  <span class="token string">'b'</span><span class="token keyword">end</span><span class="token constant">Benchmark</span><span class="token punctuation">.</span>bmbm <span class="token keyword">do</span> <span class="token operator">|</span>x<span class="token operator">|</span>  x<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">"normal"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     puts <span class="token string">"<span class="token interpolation"><span class="token delimiter tag">#{</span>a<span class="token delimiter tag">}</span></span><span class="token interpolation"><span class="token delimiter tag">#{</span>b<span class="token delimiter tag">}</span></span>"</span>  <span class="token punctuation">}</span>  x<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">"Thread.future"</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     pool <span class="token operator">=</span> <span class="token builtin">Thread</span><span class="token punctuation">.</span>pool <span class="token number">2</span>    f1 <span class="token operator">=</span> pool<span class="token punctuation">.</span>future <span class="token punctuation">{</span>      a    <span class="token punctuation">}</span>    f2 <span class="token operator">=</span> pool<span class="token punctuation">.</span>future <span class="token punctuation">{</span>      b    <span class="token punctuation">}</span>    puts <span class="token string">"<span class="token interpolation"><span class="token delimiter tag">#{</span><span class="token operator">~</span>f1<span class="token delimiter tag">}</span></span><span class="token interpolation"><span class="token delimiter tag">#{</span><span class="token operator">~</span>f2<span class="token delimiter tag">}</span></span>"</span>  <span class="token punctuation">}</span><span class="token keyword">end</span></code></pre><p>使用 Benchmark 对比，和我们设想的完全一样。</p><pre><code>Rehearsal -------------------------------------------------normal        ab  0.000000   0.000000   0.000000 (  7.010414)Thread.future ab  0.000000   0.000000   0.000000 (  5.002781)---------------------------------------- total: 0.000000sec                    user     system      total        realnormal        ab  0.000000   0.000000   0.000000 (  7.004402)Thread.future ab  0.000000   0.000000   0.000000 (  5.003263)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ruby synchronized</title>
      <link href="/ruby-synchronized/"/>
      <url>/ruby-synchronized/</url>
      
        <content type="html"><![CDATA[<p>最近学习 <code>Java</code> 的时候了解到在 <code>Java</code> 中 <code>synchronized</code> 关键字可以保证代码块的串行执行。</p><p>在 <code>ruby</code> 开发中往往使用第三方来保证，比如使用数据库或文件系统。其实 <code>ruby</code> 也有类似的方式来保证代码块的串行执行，它就是 <code>Mutex</code> 的 <code>synchronize</code>。</p><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">require</span> <span class="token string">'thread'</span>semaphore <span class="token operator">=</span> <span class="token constant">Mutex</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token class-name">a</span> <span class="token operator">=</span> <span class="token builtin">Thread</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token punctuation">{</span>  semaphore<span class="token punctuation">.</span>synchronize <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># access shared resource</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>b <span class="token operator">=</span> <span class="token builtin">Thread</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token punctuation">{</span>  semaphore<span class="token punctuation">.</span>synchronize <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># access shared resource</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Rails Singular Resources</title>
      <link href="/rails-singular-resources/"/>
      <url>/rails-singular-resources/</url>
      
        <content type="html"><![CDATA[<p><code>Rails</code> 中 <code>Controller</code> 如果不是复数，写 <code>path</code> 或 <code>url</code> 的时候就必须加上 <code>index</code>，这样看上去就很 <code>low</code>。</p><pre class=" language-ruby"><code class="language-ruby">resources <span class="token symbol">:photo</span> <span class="token keyword">do</span>    collection <span class="token keyword">do</span>        get <span class="token string">'search'</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment" spellcheck="true"># search_photo_index GET    /photo/search(.:format)</span></code></pre><p>我们查看 <a href="http://guides.rubyonrails.org/routing.html#singular-resources" target="_blank" rel="noopener">文档</a>，发现可以这样做</p><pre class=" language-ruby"><code class="language-ruby">resource <span class="token symbol">:photo</span><span class="token punctuation">,</span> controller<span class="token punctuation">:</span> photo <span class="token keyword">do</span>    collection <span class="token keyword">do</span>        get <span class="token string">'search'</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment" spellcheck="true"># search_photo GET    /photo/search(.:format)</span></code></pre><p>需要注意的是经过这样修改后，访问 <code>/photo</code> 不再调用 <code>index action</code> 而是调用 <code>show action</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Web 文件下载和查看</title>
      <link href="/web-wen-jian-xia-zai-he-cha-kan/"/>
      <url>/web-wen-jian-xia-zai-he-cha-kan/</url>
      
        <content type="html"><![CDATA[<p>在浏览器中点击一个文件链接，会被浏览器直接打开或者下载。<br>其实浏览器的行为是可以人为控制的，最简单的方法是使用 <code>HTML5 download Attribute</code>。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- will download as "expenses.pdf" --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/files/expenses.pdf<span class="token punctuation">"</span></span> <span class="token attr-name">download</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>expenses.pdf<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Download Your Expense Report<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>这种方式虽然简单，但是兼容性不太好。查看<a href="http://caniuse.com/download" target="_blank" rel="noopener">http://caniuse.com/download</a>，我们可以发现很多版本都不支持这个属性。</p><p>浏览器行为是由 <code>HTTP Head</code> 中的 <code>Content-Disposition</code> 来控制的，例如</p><pre><code>Content-Disposition: attachment; filename=&quot;fname.txt&quot;</code></pre><p>它的意思是将该文件作为附件，并且下载的文件名是 <code>fname.txt</code>。</p><p>如果使用 <code>S3</code> 下载文件，使用 <code>AWS</code> 的 <code>api</code> 可以生成下载的 <code>url</code>:</p><pre class=" language-ruby"><code class="language-ruby">url <span class="token operator">=</span> object<span class="token punctuation">.</span><span class="token function">url_for</span><span class="token punctuation">(</span><span class="token symbol">:read</span><span class="token punctuation">,</span> response_content_disposition<span class="token punctuation">:</span> <span class="token string">"attachment; filename=\"<span class="token interpolation"><span class="token delimiter tag">#{</span>filename<span class="token delimiter tag">}</span></span>\""</span><span class="token punctuation">)</span></code></pre><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul><li><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html" target="_blank" rel="noopener">http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html</a></li><li><a href="http://docs.aws.amazon.com/AWSRubySDK/latest/AWS/S3/S3Object.html" target="_blank" rel="noopener">http://docs.aws.amazon.com/AWSRubySDK/latest/AWS/S3/S3Object.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> HTTP </tag>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Siege</title>
      <link href="/siege/"/>
      <url>/siege/</url>
      
        <content type="html"><![CDATA[<p><code>siege</code> 围攻是一个压力测试和评测工具，设计用于 <code>web</code> 开发这评估应用在压力下的承受能力。</p><p>可以模拟对一个 <code>web</code> 站点进行多用户的并发访问，记录每个用户所有请求过程的响应时间，并在一定数量的并发访问下重复进行。</p><h3 id="在-Mac-OS-X-下安装"><a href="#在-Mac-OS-X-下安装" class="headerlink" title="在 Mac OS X 下安装"></a>在 <code>Mac OS X</code> 下安装</h3><pre class=" language-sh"><code class="language-sh">wget http://download.joedog.org/siege/siege-3.0.5.tar.gztar -xvf siege-latest.tar.gzcd siege-*./configuremakesudo make install</code></pre><p>完毕后，查看是否安装成功，使用<code>which siege</code></p><h3 id="在-Ubuntu-下安装"><a href="#在-Ubuntu-下安装" class="headerlink" title="在 Ubuntu 下安装"></a>在 <code>Ubuntu</code> 下安装</h3><pre class=" language-sh"><code class="language-sh">sudo apt-cache search siegesudo apt-get install siege </code></pre><p>现在可以开始使用这个工具了，例如</p><pre class=" language-sh"><code class="language-sh">siege -c 300 -t 100s 127.0.0.1:3000</code></pre><p>参数详解</p><pre class=" language-sh"><code class="language-sh">-C,或–config 在屏幕上打印显示出当前的配置,配置是包括在他的配置文件$HOME/.siegerc中,可以编辑里面的参数,这样每次siege 都会按照它运行.  -v 运行时能看到详细的运行信息  -c n,或–concurrent=n 模拟有n个用户在同时访问,n不要设得太大,因为越大,siege 消耗本地机器的资源越多  -i,–internet 随机访问urls.txt中的url列表项,以此模拟真实的访问情况(随机性),当urls.txt存在是有效  -d n,–delay=n hit每个url之间的延迟,在0-n之间  -r n,–reps=n 重复运行测试n次,不能与 -t同时存在  -t n,–time=n 持续运行siege ‘n’秒(如10S),分钟(10M),小时(10H)  -l 运行结束,将统计数据保存到日志文件中siege .log,一般位于/usr/local/var/siege .log中,也可在.siegerc中自定义  -R SIEGERC,–rc=SIEGERC 指定用特定的siege 配置文件来运行,默认的为$HOME/.siegerc  -f FILE, –file=FILE 指定用特定的urls文件运行siege ,默认为urls.txt,位于siege 安装目录下的etc/urls.txt  -u URL,–url=URL 测试指定的一个URL,对它进行”siege “,此选项会忽略有关urls文件的设定  </code></pre><p>结果说明</p><pre class=" language-sh"><code class="language-sh">Transactions: 30000 hits //完成30000次处理  Availability: 100.00 % //100.00 % 成功率  Elapsed time: 68.59 secs //总共使用时间  Data transferred: 817.76 MB //共数据传输 817.76 MB  Response time: 0.04 secs //响应时间，显示网络连接的速度  Transaction rate: 437.38 trans/sec //平均每秒完成 437.38 次处理  Throughput: 11.92 MB/sec //平均每秒传送数据  Concurrency: 17.53 //实际最高并发连接数  Successful transactions: 30000 //成功处理次数  Failed transactions: 0 //失败处理次数  Longest transaction: 3.12 //每次传输所花最长时间  Shortest transaction: 0.00 //每次传输所花最短时间  </code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Siege </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git 彻底删除文件</title>
      <link href="/git-che-di-shan-chu-wen-jian/"/>
      <url>/git-che-di-shan-chu-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>一般 <code>git</code> 删除文件使用 <code>git rm</code> 就可以了，但是有时候某些文件你甚至不想让它出现在 <code>git</code> 的 <code>log</code>中。</p><p><code>github</code> 有<a href="https://help.github.com/articles/remove-sensitive-data" target="_blank" rel="noopener">一篇文章</a>详细说明了如何操作，经过尝试是可以成功将文件彻底删除，在 <code>log</code> 中都找不到。</p><p>比如删除根目录下的 <code>file</code> 文件夹彻底删除: </p><pre class=" language-sh"><code class="language-sh">git filter-branch --force --index-filter \  'git rm -rf -r --cached --ignore-unmatch file' \  --prune-empty --tag-name-filter cat -- --all</code></pre><p>然后: </p><pre class=" language-sh"><code class="language-sh">git push origin master --force</code></pre><p>这样 <code>git</code> 仓库中这个文件夹就被彻底删除了。</p><p>如果你还想清除本地的一些缓存，可以依次进行下面几部操作 </p><pre class=" language-sh"><code class="language-sh">rm -rf .git/refs/original/`git reflog expire --expire=now --allgit gc --prune=nowgit gc --aggressive --prune=now</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP 神奇的分号</title>
      <link href="/php-shen-qi-de-fen-hao/"/>
      <url>/php-shen-qi-de-fen-hao/</url>
      
        <content type="html"><![CDATA[<p>今天在开发过程中，遇到两种分号的神奇问题，特此记录。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token string">'我是正常的分号'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'我是神奇的分号'</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>用肉眼无法分辨两种分号的区别，如果你使用 <code>win</code> 平台，上面两条语句都可以运行。但是如果你是 <code>unix</code> 或是 <code>linux</code> 则是语法错误。</p><p>根本原因是这是两种分号，他们的字符编码不同，<code>win</code> 同时支持这两种分号，而 <code>unix</code> 或是 <code>linux</code> 只支持其中一种。</p><p>这个现象和字母的大小写很类似，<code>win</code> 不区分大小写，而 <code>unix</code> 或是 <code>linux</code> 区分大小写。</p><p>使用下面这段代码就可以证明我们的猜想</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">';'</span> <span class="token operator">==</span> <span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">'相等'</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">'不相等'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决 JavaScript 指向不明</title>
      <link href="/jie-jue-javascript-zhi-xiang-bu-ming/"/>
      <url>/jie-jue-javascript-zhi-xiang-bu-ming/</url>
      
        <content type="html"><![CDATA[<p>用面向对象的方式编写 <code>JavaScript</code> 时，在类中经常会出现 <code>this</code> 指向不明的问题。</p><p>解决这个问题很简单，在对象中将 <code>this</code> 指定给一个变量，然后都使用这个对象就可以了。</p><p>例如在类文件的最开始加上下述代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></code></pre><p>这样在这个类中，<code>self</code> 就指向了 <code>this</code>，我们使用 <code>self</code> 这个变量，就可以不用担心 <code>this</code> 指向不明的问题了。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git 忽略文件</title>
      <link href="/git-hu-lue-wen-jian/"/>
      <url>/git-hu-lue-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>使用 <code>git</code> 时，经常需要忽略一些文件，比如一些 <code>IDE</code> 生成的配置文件。</p><p>在项目目录加上 <code>.gitignore</code> 文件，然后加入需要忽略文件的文件名就可以了。</p><pre><code>.project</code></pre><p>需要注意的是，如果需要忽略 <code>.gitignore</code> 文件，那么文件中就要加上 <code>.gitignore</code></p><pre><code>.project.gitignore</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript 变量声明提前</title>
      <link href="/javascript-bian-liang-sheng-ming-ti-qian/"/>
      <url>/javascript-bian-liang-sheng-ming-ti-qian/</url>
      
        <content type="html"><![CDATA[<p><code>JavaScript</code> 使用了函数作用域，变量在声明它们的函数体以及这个函数体嵌套的任意函数体内都是有定义的。</p><p>到底是什么意思呢？我们来看下面这段代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'global'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'local'</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>你可能认为输出是</p><pre><code>global  local  </code></pre><p>但是运行一下你就会发现实际结果是</p><pre><code>undefined  local  </code></pre><p>深入研究你会发现就算是你使用传递参数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'global'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'local'</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>实际结果依然是</p><pre><code>undefined  local  </code></pre><p>或者代码改写为</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'global'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> scope<span class="token punctuation">;</span>  <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'local'</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>实际结果仍然是</p><pre><code>undefined  </code></pre><p>为什么，后面的代码能够影响到前面的代码？</p><p>照成这种结果的原因的就是前面提到的函数作用域，在 <code>JavaScript</code> 中上面的代码实际上是这样的</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'global'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> scope<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'local'</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>JavaScript</code> 这个特性被非正式地称为声明提前，即函数里声明的所有变量都被提前至函数体的顶部，但是这个声明提前至声明却不赋值。</p><p>由于拥有这种特性，在编写代码时一些程序员特意将变量声明放在函数体的顶部，而不是像其他语言中让变量声明和使用变量的代码尽量靠近。</p><p>所以在函数体中使用到 <code>var</code> 来声明变量时，记得将声明和赋值语句放在函数体的顶部，避免因为这种特性造成变量值为 <code>undefined</code> 的 <code>BUG</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP 冒泡排序</title>
      <link href="/php-mou-pao-pai-xu/"/>
      <url>/php-mou-pao-pai-xu/</url>
      
        <content type="html"><![CDATA[<p>使用递归实现冒泡排序</p><p><code>PHP</code> 多递归时需要 <code>return</code>，如下述代码中</p><pre class=" language-php"><code class="language-php"><span class="token keyword">return</span> <span class="token function">bubblesort</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">,</span> <span class="token variable">$count</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果改为</p><pre class=" language-php"><code class="language-php"><span class="token function">bubblesort</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">,</span> <span class="token variable">$count</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上层就接不到值，即结果为 <code>null</code></p><p>完整的代码实现</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//产生10个1到100的随机数</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* * 冒泡排序 */</span><span class="token keyword">function</span> <span class="token function">bubblesort</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">,</span> <span class="token variable">$count</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$count</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//排序结束</span>    <span class="token keyword">return</span> <span class="token variable">$array</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$count</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将两个相邻的随机数做比较，</span>    <span class="token comment" spellcheck="true">//当第$i个随机数大于第$i+1个随机数时，</span>    <span class="token comment" spellcheck="true">//互换它们的位置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$tmp</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//PHP中递归需要return，否则只能得到null</span>  <span class="token keyword">return</span> <span class="token function">bubblesort</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">,</span> <span class="token variable">$count</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$count</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$new_array</span> <span class="token operator">=</span> <span class="token function">bubblesort</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">,</span> <span class="token variable">$count</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$new_array</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP 工厂方法模式</title>
      <link href="/php-gong-han-fang-fa-mo-shi/"/>
      <url>/php-gong-han-fang-fa-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>简单工厂其实不是一个设计模式，反而比较像是一种编程习惯。</p><p>有些开发人员的确是把这个编程习惯误认为是工厂模式。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//比萨商店</span><span class="token keyword">class</span> <span class="token class-name">PizzaStore</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token variable">$Factory</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$factory</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">Factory</span> <span class="token operator">=</span> <span class="token variable">$factory</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">orderPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">Factory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$Pizza</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//简单比萨工厂</span><span class="token keyword">class</span> <span class="token class-name">SimplePizzaFactory</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'cheese'</span> <span class="token operator">==</span> <span class="token variable">$type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token string">'pepperoni'</span> <span class="token operator">==</span> <span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PepperoniPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$Pizza</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>工厂方法模式 <code>Factory Method Pattern</code>，定义了一个创建对象的接口，但由子类决定要实例化的是哪一个。</p><p>工厂方法让类把实例化推迟到子类。</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//比萨接口</span><span class="token keyword">interface</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//比萨1</span><span class="token keyword">class</span> <span class="token class-name">CheesePizza</span> <span class="token keyword">implements</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'CheesePizza prepare&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'CheesePizza bake&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'CheesePizza cut&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'CheesePizza box&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//比萨2</span><span class="token keyword">class</span> <span class="token class-name">PepperoniPizza</span> <span class="token keyword">implements</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'PepperoniPizza prepare&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'PepperoniPizza bake&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'PepperoniPizza cut&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'PepperoniPizza box&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//纽约比萨1</span><span class="token keyword">class</span> <span class="token class-name">NYCheesePizza</span> <span class="token keyword">implements</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NYCheesePizza prepare&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NYCheesePizza bake&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NYCheesePizza cut&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NYCheesePizza box&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//纽约比萨2</span><span class="token keyword">class</span> <span class="token class-name">NYPepperoniPizza</span> <span class="token keyword">implements</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NYPepperoniPizza prepare&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NYPepperoniPizza bake&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NYPepperoniPizza cut&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NYPepperoniPizza box&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//芝加哥比萨1</span><span class="token keyword">class</span> <span class="token class-name">ChicagoCheesePizza</span> <span class="token keyword">implements</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'ChicagoCheesePizza prepare&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'ChicagoCheesePizza bake&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'ChicagoCheesePizza cut&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'ChicagoCheesePizza box&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//芝加哥比萨2</span><span class="token keyword">class</span> <span class="token class-name">ChicagoPepperoniPizza</span> <span class="token keyword">implements</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'ChicagoPepperoniPizza prepare&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'ChicagoPepperoniPizza bake&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'ChicagoPepperoniPizza cut&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'ChicagoPepperoniPizza box&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义比萨商店</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">PizzaStore</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">orderPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$Pizza</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">abstract</span> <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//纽约比萨店</span><span class="token keyword">class</span> <span class="token class-name">NYPizzaStore</span> <span class="token keyword">extends</span> <span class="token class-name">PizzaStore</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'cheese'</span> <span class="token operator">==</span> <span class="token variable">$type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NYCheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token string">'pepperoni'</span> <span class="token operator">==</span> <span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NYPepperoniPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$Pizza</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//芝加哥比萨店</span><span class="token keyword">class</span> <span class="token class-name">ChicagoPizzaStore</span> <span class="token keyword">extends</span> <span class="token class-name">PizzaStore</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'cheese'</span> <span class="token operator">==</span> <span class="token variable">$type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChicagoCheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token string">'pepperoni'</span> <span class="token operator">==</span> <span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChicagoPepperoniPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$Pizza</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$NYPizzaStore</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NYPizzaStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ChicagoPizzaStore</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChicagoPizzaStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$NYPizzaStore</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">orderPizza</span><span class="token punctuation">(</span><span class="token string">'cheese'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ChicagoPizzaStore</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">orderPizza</span><span class="token punctuation">(</span><span class="token string">'pepperoni'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出</p><pre><code>NYCheesePizza prepare  NYCheesePizza bake  NYCheesePizza cut  NYCheesePizza box  ChicagoPepperoniPizza prepare   ChicagoPepperoniPizza bake   ChicagoPepperoniPizza cut  ChicagoPepperoniPizza box  </code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP 装饰者模式</title>
      <link href="/php-zhuang-shi-zhe-mo-shi/"/>
      <url>/php-zhuang-shi-zhe-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>装饰者模式 <code>Decorator Pattern</code> ，动态地将责任附加到对象上。</p><p>若要扩展功能，装饰者提供了比继承更有弹性的替代方案。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//饮料抽象类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Beverage</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token variable">$description</span> <span class="token operator">=</span> <span class="token string">'Unknown Beverage'</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">description</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">function</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调料抽象类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CondimentDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">Beverage</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//书中的JAVA代码里这里是一个抽象方法，PHP不允许这么做</span>  <span class="token comment" spellcheck="true">//public abstract function getDescription();</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//饮料1</span><span class="token keyword">class</span> <span class="token class-name">Espresso</span> <span class="token keyword">extends</span> <span class="token class-name">Beverage</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">description</span> <span class="token operator">=</span> <span class="token string">'Espresso'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1.99</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//饮料2</span><span class="token keyword">class</span> <span class="token class-name">HouseBlend</span> <span class="token keyword">extends</span> <span class="token class-name">Beverage</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">description</span> <span class="token operator">=</span> <span class="token string">'House Blend Coffee'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0.89</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调料1</span><span class="token keyword">class</span> <span class="token class-name">Mocha</span> <span class="token keyword">extends</span> <span class="token class-name">CondimentDecorator</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token variable">$beverage</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$beverage</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">beverage</span> <span class="token operator">=</span> <span class="token variable">$beverage</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">beverage</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">', Mocha'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0.2</span> <span class="token operator">+</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">beverage</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//一杯普通的饮料</span><span class="token variable">$beverage</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Espresso</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'Description:'</span><span class="token punctuation">.</span><span class="token variable">$beverage</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;br/>Cost:'</span><span class="token punctuation">.</span><span class="token variable">$beverage</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br/>'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一杯普通的饮料</span><span class="token variable">$beverage2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HouseBlend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加一点调料</span><span class="token variable">$beverage2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mocha</span><span class="token punctuation">(</span><span class="token variable">$beverage2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'Description:'</span><span class="token punctuation">.</span><span class="token variable">$beverage2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;br/>Cost:'</span><span class="token punctuation">.</span><span class="token variable">$beverage2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br/>'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//再多加一点调料</span><span class="token variable">$beverage2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mocha</span><span class="token punctuation">(</span><span class="token variable">$beverage2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'Description:'</span><span class="token punctuation">.</span><span class="token variable">$beverage2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;br/>Cost:'</span><span class="token punctuation">.</span><span class="token variable">$beverage2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br/>'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//再多加一点调料</span><span class="token variable">$beverage2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mocha</span><span class="token punctuation">(</span><span class="token variable">$beverage2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'Description:'</span><span class="token punctuation">.</span><span class="token variable">$beverage2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;br/>Cost:'</span><span class="token punctuation">.</span><span class="token variable">$beverage2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br/>'</span><span class="token punctuation">;</span></code></pre><p>输出</p><pre><code>Description:Espresso   Cost:1.99   Description:House Blend Coffee, Mocha  Cost:1.09  Description:House Blend Coffee, Mocha, Mocha  Cost:1.29  Description:House Blend Coffee, Mocha, Mocha, Mocha  Cost:1.49  </code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP 抽象工厂模式</title>
      <link href="/php-chou-xiang-gong-han-mo-shi/"/>
      <url>/php-chou-xiang-gong-han-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>抽象工厂模式 <code>Abstract Factory Pattern</code>，提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//定义比萨商店</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">PizzaStore</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">orderPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$Pizza</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">abstract</span> <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//纽约比萨店</span><span class="token keyword">class</span> <span class="token class-name">NYPizzaStore</span> <span class="token keyword">extends</span> <span class="token class-name">PizzaStore</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token variable">$PizzaIngredientFactory</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NYPizzaIngredientFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'cheese'</span> <span class="token operator">==</span> <span class="token variable">$type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheesePizza</span><span class="token punctuation">(</span><span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token string">'clam'</span> <span class="token operator">==</span> <span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClamPizza</span><span class="token punctuation">(</span><span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$Pizza</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//芝加哥比萨店</span><span class="token keyword">class</span> <span class="token class-name">ChicagoPizzaStore</span> <span class="token keyword">extends</span> <span class="token class-name">PizzaStore</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token variable">$PizzaIngredientFactory</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChicagoPizzaIngredientFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'cheese'</span> <span class="token operator">==</span> <span class="token variable">$type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheesePizza</span><span class="token punctuation">(</span><span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token string">'clam'</span> <span class="token operator">==</span> <span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClamPizza</span><span class="token punctuation">(</span><span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$Pizza</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//原料工厂接口</span><span class="token keyword">interface</span> <span class="token class-name">PizzaIngredientFactory</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createDough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createCheese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createVeggies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createPepperoni</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createClam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//纽约原料工厂</span><span class="token keyword">class</span> <span class="token class-name">NYPizzaIngredientFactory</span> <span class="token keyword">implements</span> <span class="token class-name">PizzaIngredientFactory</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createDough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NY createDough&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NY createSauce&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createCheese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NY createCheese&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createVeggies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NY createVeggies&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createPepperoni</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NY createPepperoni&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createClam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NY createClam&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//芝加哥原料工厂</span><span class="token keyword">class</span> <span class="token class-name">ChicagoPizzaIngredientFactory</span> <span class="token keyword">implements</span> <span class="token class-name">PizzaIngredientFactory</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createDough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Chicago createDough&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Chicago createSauce&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createCheese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Chicago createCheese&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createVeggies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Chicago createVeggies&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createPepperoni</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Chicago createPepperoni&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createClam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Chicago createClam&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//比萨类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>  <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'bake&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'cut&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'box&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//比萨1</span><span class="token keyword">class</span> <span class="token class-name">CheesePizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span> <span class="token operator">=</span> <span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//向原料工厂请求原料</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createDough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createCheese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//比萨2</span><span class="token keyword">class</span> <span class="token class-name">ClamPizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span> <span class="token operator">=</span> <span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//向原料工厂请求原料</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createDough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createCheese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createClam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$NYPizzaStore</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NYPizzaStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ChicagoPizzaStore</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChicagoPizzaStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$NYPizzaStore</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">orderPizza</span><span class="token punctuation">(</span><span class="token string">'cheese'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ChicagoPizzaStore</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">orderPizza</span><span class="token punctuation">(</span><span class="token string">'clam'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出</p><pre><code>NY createDough  NY createSauce  NY createCheese  bake  cut  box  Chicago createDough  Chicago createSauce  Chicago createCheese  Chicago createClam  bake  cut  box</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
