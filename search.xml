<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>了解如何通过 reduce 方法折叠集合</title>
      <link href="/liao-jie-ru-he-tong-guo-reduce-fang-fa-zhe-die-ji-he/"/>
      <url>/liao-jie-ru-he-tong-guo-reduce-fang-fa-zhe-die-ji-he/</url>
      
        <content type="html"><![CDATA[<blockquote><p>总是要给累加器一个初值。</p><p>给予 <code>reduce</code> 的块总是要返回一个累加器。对当前累加器的修改是可行的，要记住从块中返回。</p></blockquote><p>假设我们有一个存储用户的数组，我们希望从中筛选出那些年龄大于或者等于 <code>21</code> 岁的人群。之后我们希望将这个用户数组转换成一个姓名数组。在没有使用 <code>reduce</code> 的时候，你可能会这样写：</p><pre class=" language-ruby"><code class="language-ruby">users<span class="token punctuation">.</span>select <span class="token punctuation">{</span><span class="token operator">|</span>u<span class="token operator">|</span> u<span class="token punctuation">.</span>age <span class="token operator">>=</span> <span class="token number">21</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token symbol">:name</span><span class="token punctuation">)</span></code></pre><p>当然这么做肯定是可行的，但并不高效。<code>select</code> 方法会遍历整个用户数组并返回新数组。这个新数组之后会再次进行遍历并映射成另一个值只包含名字的新数组。如果我们使用 <code>reduce</code> ，则无需创建或遍历多个数组：</p><pre class=" language-ruby"><code class="language-ruby">users<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>names<span class="token punctuation">,</span> user<span class="token operator">|</span>  names <span class="token operator">&lt;</span><span class="token operator">&lt;</span> user<span class="token punctuation">.</span>name <span class="token keyword">if</span> user<span class="token punctuation">.</span>age <span class="token operator">>=</span> <span class="token number">21</span>  names<span class="token keyword">end</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在改变作为参数的集合之前复制它们</title>
      <link href="/zai-gai-bian-zuo-wei-can-shu-de-ji-he-zhi-qian-fu-zhi-ta-men/"/>
      <url>/zai-gai-bian-zuo-wei-can-shu-de-ji-he-zhi-qian-fu-zhi-ta-men/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>Ruby</code> 中参数是按引用传递的，而不是值传递。这个规则有一个例外值得注意：它不适用于 <code>Fixnum</code> 对象。</p><p>在改变集合之前先复制它们。</p></blockquote><p><code>Ruby</code> 语言自带了两个用来复制对象的方法：<code>dup</code> 和 <code>clone</code>。它们都会基于接收者创建新的对象，但是与 <code>dup</code> 方法不同的是，<code>clone</code> 方法会保留原始对象的两个附加特性。</p><p>首先，<code>clone</code> 方法会保留接收者的冻结状态。如果原始对象的状态是冻结的，那么生成的副本也是冻结的。而 <code>dup</code> 方法就不同了，它永远不会返回冻结的对象。</p><p>其次，如果接收者中存在单例方法，使用 <code>clone</code> 方法也会复制单例类。由于 <code>dup</code> 方法不会这样做，所以当使用 <code>dup</code> 方法时，原始对象和使用 <code>dup</code> 方法创建的副本对于相同消息的响应可能是不同的。</p><p>多数情况下应使用 <code>dup</code> 方法而不是 <code>clone</code> 方法，特别是当你希望修改结果对象时。冻结对象时无法修改或是解冻的，所以 <code>clone</code> 方法可能会返回一个不可变的对象。由于我们要去对新对象进行修改，因此 <code>dup</code> 方法显然是更合适的选择。</p><blockquote><p><code>dup</code> 方法和 <code>clone</code> 方法只会进行浅拷贝。</p></blockquote><p>复制传入集合是一种常见的模式。但要小心，使用这样的方法存在潜在的危险。你要知道 <code>dup</code> 方法和 <code>clone</code> 方法返回的是浅拷贝对象。对于像 <code>Array</code> 一样的集合，这意味着仅仅复制了容器本身而没有复制其中的元素。</p><p>可以在不影响原始集合的情况下增添或移除其中的元素，但修改元素本身则是有影响的。原始集合及其副本引用了相同的元素对象。修改任一元素都会影响到集合本身，同样也会影响到任何引用这一元素的对象。</p><pre class=" language-ruby"><code class="language-ruby">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Polar"</span><span class="token punctuation">]</span>b <span class="token operator">=</span> a<span class="token punctuation">.</span>dup <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token string">"Bear"</span><span class="token comment" spellcheck="true">#=> ["Polar", "Bear"]</span>b<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token punctuation">{</span><span class="token operator">|</span>x<span class="token operator">|</span> x<span class="token punctuation">.</span>sub<span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">'lar'</span><span class="token punctuation">,</span> <span class="token string">'oh'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#=> ["Pooh", "Bear"]</span>a<span class="token comment" spellcheck="true">#=> ["Pooh"]</span></code></pre><blockquote><p>对于多数对象来说，可以使用 <code>Marshal</code> 来完成深拷贝。</p></blockquote><p>可以使用 <code>Marshal</code> 类将一个集合及其所持有的元素序列化，然后再反序列化：</p><pre class=" language-ruby"><code class="language-ruby">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Monkey"</span><span class="token punctuation">,</span> <span class="token string">"Brains"</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token constant">Marshal</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token constant">Marshal</span><span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#=> ["Monkey", "Brains"]</span>b<span class="token punctuation">.</span><span class="token keyword">each</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token symbol">:upcase!</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#=> ["MONKEY", "BRAINS"]</span>a<span class="token comment" spellcheck="true">#=> ["Monkey", "Brains"]</span></code></pre><p>使用 <code>Marshal</code> 来解决这一问题这某种程度上有一定的局限性。抛开对对象序列化和反序列化的时间不说，你还得考虑这一过程中需要的内存。毫无疑问，对象的副本会持有其本身的内存空间，而使用 <code>Marshal::dump</code> 中序列化时创建的字节流也是会占用内存的。转储和加载大对象会使程序消耗大内存更多。</p><p>一个潜在的更加严峻的问题时并非所有对象都可以被 <code>Marshal</code> 序列化。那些持有闭包的对象以及那些具有单例方法的对象时无法被序列化的。<code>Ruby</code> 的一些核心类也是不能被 <code>Marshal</code> 序列化的。这包括 <code>IO</code> 以及 <code>File</code> 等类型。对于所有这样的情形，在使用 <code>Marshal::dump</code> 进行序列化时会抛出一个 <code>TypeError</code> 异常。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker 中 NGINX 挂载应用的静态文件</title>
      <link href="/docker-zhong-nginx-gua-zai-ying-yong-de-jing-tai-wen-jian/"/>
      <url>/docker-zhong-nginx-gua-zai-ying-yong-de-jing-tai-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>在 <code>Docker</code> 中 <code>NGINX</code> 如何获得应用的静态文件呢？</p><p>一般来说这种共享文件的需求，我们需要使用 <code>volumes</code></p><p>假如静态文件的地址是 <code>/home/app/app_name/public</code></p><p>那么我们在中 <code>docker-compose.yml</code> 中设置 <code>volumes</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">volumes</span><span class="token punctuation">:</span>    <span class="token key atrule">public</span><span class="token punctuation">:</span> <span class="token key atrule">services</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span>        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>             <span class="token punctuation">-</span> public<span class="token punctuation">:</span>/home/app/app_name/public  <span class="token key atrule">web</span><span class="token punctuation">:</span>        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>             <span class="token punctuation">-</span> public<span class="token punctuation">:</span>/home/app/app_name/public</code></pre><p>记得在 <code>nginx.conf</code> 设置 <code>root</code></p><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true"># define the public application root  </span>   <span class="token keyword">root</span>  <span class="token operator">/</span>home<span class="token operator">/</span>app<span class="token operator">/</span>app_name<span class="token operator">/</span>public<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul><li><a href="https://docs.docker.com/compose/compose-file/#volumes" target="_blank" rel="noopener">Compose file version 3 reference</a></li><li><a href="https://docs.docker.com/storage/volumes/#start-a-container-with-a-volume" target="_blank" rel="noopener">Use volumes</a></li><li><a href="https://stackoverflow.com/questions/42232051/docker-compose-volumes-from-equivalent-with-version-3" target="_blank" rel="noopener">docker-compose volumes_from equivalent with version 3</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Docker Compose </tag>
            
            <tag> NGINX </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>推荐使用 Struct 而非 Hash 存储结构化数据</title>
      <link href="/tui-jian-shi-yong-struct-er-fei-hash-cun-chu-jie-gou-hua-shu-ju/"/>
      <url>/tui-jian-shi-yong-struct-er-fei-hash-cun-chu-jie-gou-hua-shu-ju/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在处理结构化数据时，如果创建一个新类不那么合适时，推荐使用 <code>Struct</code> 而非 <code>Hash</code> </p><p>将 <code>Struct::new</code> 的返回值赋给常量，并像类一样使用它。</p></blockquote><pre class=" language-ruby"><code class="language-ruby"><span class="token comment" spellcheck="true"># Hash</span>reading <span class="token operator">=</span> <span class="token punctuation">{</span> date<span class="token punctuation">:</span> <span class="token string">"2018-10-30"</span><span class="token punctuation">,</span> high<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> low<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">mean</span><span class="token punctuation">(</span>reading<span class="token punctuation">)</span>  <span class="token punctuation">(</span>reading<span class="token punctuation">[</span><span class="token symbol">:high</span><span class="token punctuation">]</span> <span class="token operator">+</span> reading<span class="token punctuation">[</span><span class="token symbol">:low</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token keyword">end</span><span class="token function">mean</span><span class="token punctuation">(</span>reading<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#=> 25.0</span><span class="token comment" spellcheck="true"># Struct</span><span class="token constant">Reading</span> <span class="token operator">=</span> <span class="token builtin">Struct</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token symbol">:date</span><span class="token punctuation">,</span> <span class="token symbol">:high</span><span class="token punctuation">,</span> <span class="token symbol">:low</span><span class="token punctuation">)</span> <span class="token keyword">do</span>  <span class="token keyword">def</span> <span class="token function">mean</span>    <span class="token punctuation">(</span>high <span class="token operator">+</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span>  <span class="token keyword">end</span><span class="token keyword">end</span><span class="token constant">Reading</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">"2018-10-30"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean <span class="token comment" spellcheck="true">#=> 25.0</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>留神，常量是可变的</title>
      <link href="/liu-shen-chang-liang-shi-ke-bian-de/"/>
      <url>/liu-shen-chang-liang-shi-ke-bian-de/</url>
      
        <content type="html"><![CDATA[<blockquote><p>总是将常量冻结 <code>freeze</code>，从而防止其被改变。</p></blockquote><p>不使用 <code>freeze</code> ，常量可以修改。</p><pre class=" language-ruby"><code class="language-ruby"><span class="token constant">MY_CONSTANT</span> <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token constant">MY_CONSTANT</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token string">"bar"</span>puts <span class="token constant">MY_CONSTANT</span> <span class="token comment" spellcheck="true">#=> "foobar"</span></code></pre><p>使用 <code>freeze</code> ，常量无法修改。</p><pre class=" language-ruby"><code class="language-ruby"><span class="token constant">MY_CONSTANT</span> <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">.</span>freeze<span class="token constant">MY_CONSTANT</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token string">"bar"</span> <span class="token comment" spellcheck="true">#=> FrozenError (can't modify frozen String)</span></code></pre><blockquote><p>如果常量引用了一个集合对象比如数组或散列，那么冻结整个集合及其所有元素。</p></blockquote><p>这个 <code>tip</code> 已经落伍，在 <code>Ruby 2.2</code> 及后续版本会自动冻结整个集合及其所有元素。</p><pre class=" language-ruby"><code class="language-ruby"><span class="token comment" spellcheck="true"># in Ruby >= 2.1</span><span class="token constant">NETWORKS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"192.168.1"</span><span class="token punctuation">,</span> <span class="token string">"192.168.2"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>freeze<span class="token constant">NETWORKS</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token string">"192.168.3"</span> <span class="token comment" spellcheck="true">#=> FrozenError (can't modify frozen Array)</span><span class="token constant">NETWORKS</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"192.168.3"</span> <span class="token comment" spellcheck="true">#=> FrozenError (can't modify frozen Array)</span>user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"name"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"name"</span> <span class="token punctuation">}</span><span class="token punctuation">.</span>freezeuser<span class="token punctuation">[</span><span class="token string">"email"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"email"</span> <span class="token comment" spellcheck="true">#=> FrozenError (can't modify frozen Hash)</span>user<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"name2"</span> <span class="token comment" spellcheck="true">#=> FrozenError (can't modify frozen Hash)</span></code></pre><blockquote><p>要防止常量被重新赋值，可以冻结定义它的那个模块。</p></blockquote><p>常量使用 <code>freeze</code>，<code>ruby</code> 出现 <code>warning</code> 但是依然能够被重新赋值。</p><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token constant">Defaults</span>  <span class="token constant">TIMEOUT</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">.</span>freeze<span class="token keyword">end</span><span class="token constant">Defaults</span><span class="token punctuation">:</span><span class="token symbol">:TIMEOUT</span> <span class="token operator">=</span> <span class="token number">6</span> <span class="token comment" spellcheck="true">#=> warning: already initialized constant Defaults::TIMEOUT</span><span class="token comment" spellcheck="true">#=> warning: previous definition of TIMEOUT was here</span>puts <span class="token constant">Defaults</span><span class="token punctuation">:</span><span class="token symbol">:TIMEOUT</span> <span class="token comment" spellcheck="true">#=> 6</span></code></pre><p>冻结模块后，常量无法赋值。</p><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token constant">Defaults</span>  <span class="token constant">TIMEOUT</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">end</span><span class="token constant">Defaults</span><span class="token punctuation">.</span>freeze<span class="token constant">Defaults</span><span class="token punctuation">:</span><span class="token symbol">:TIMEOUT</span> <span class="token operator">=</span> <span class="token number">6</span> <span class="token comment" spellcheck="true">#=> FrozenError (can't modify frozen Module)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ruby thread pool</title>
      <link href="/ruby-thread-pool/"/>
      <url>/ruby-thread-pool/</url>
      
        <content type="html"><![CDATA[<p>有时候会遇到一个情况需要在多个远程服务获取数据。</p><p>例如服务 <code>a</code> 需要 <code>2</code> 秒，服务 <code>b</code> 需要 <code>5</code> 秒，按照正常处理总共就需要 <code>2+5</code> 总共 <code>7</code> 秒了。</p><p>如果 <code>a</code> 和 <code>b</code> 之间并没有相互依赖关系，我们可以使用 <code>thread pool</code> 来并发获取数据，将总体耗时由 <code>a + b</code> 降低到 <code>a、b</code> 两者中的最大值。</p><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">require</span> <span class="token string">'thread/pool'</span><span class="token keyword">require</span> <span class="token string">'thread/future'</span><span class="token keyword">require</span> <span class="token string">'benchmark'</span><span class="token keyword">def</span> a  sleep <span class="token number">2</span>  <span class="token string">'a'</span><span class="token keyword">end</span><span class="token keyword">def</span> b  sleep <span class="token number">5</span>  <span class="token string">'b'</span><span class="token keyword">end</span><span class="token constant">Benchmark</span><span class="token punctuation">.</span>bmbm <span class="token keyword">do</span> <span class="token operator">|</span>x<span class="token operator">|</span>  x<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">"normal"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     puts <span class="token string">"<span class="token interpolation"><span class="token delimiter tag">#{</span>a<span class="token delimiter tag">}</span></span><span class="token interpolation"><span class="token delimiter tag">#{</span>b<span class="token delimiter tag">}</span></span>"</span>  <span class="token punctuation">}</span>  x<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">"Thread.future"</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     pool <span class="token operator">=</span> <span class="token builtin">Thread</span><span class="token punctuation">.</span>pool <span class="token number">2</span>    f1 <span class="token operator">=</span> pool<span class="token punctuation">.</span>future <span class="token punctuation">{</span>      a    <span class="token punctuation">}</span>    f2 <span class="token operator">=</span> pool<span class="token punctuation">.</span>future <span class="token punctuation">{</span>      b    <span class="token punctuation">}</span>    puts <span class="token string">"<span class="token interpolation"><span class="token delimiter tag">#{</span><span class="token operator">~</span>f1<span class="token delimiter tag">}</span></span><span class="token interpolation"><span class="token delimiter tag">#{</span><span class="token operator">~</span>f2<span class="token delimiter tag">}</span></span>"</span>  <span class="token punctuation">}</span><span class="token keyword">end</span></code></pre><p>使用 Benchmark 对比，和我们设想的完全一样。</p><pre><code>Rehearsal -------------------------------------------------normal        ab  0.000000   0.000000   0.000000 (  7.010414)Thread.future ab  0.000000   0.000000   0.000000 (  5.002781)---------------------------------------- total: 0.000000sec                    user     system      total        realnormal        ab  0.000000   0.000000   0.000000 (  7.004402)Thread.future ab  0.000000   0.000000   0.000000 (  5.003263)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ruby synchronized</title>
      <link href="/ruby-synchronized/"/>
      <url>/ruby-synchronized/</url>
      
        <content type="html"><![CDATA[<p>最近学习 <code>Java</code> 的时候了解到在 <code>Java</code> 中 <code>synchronized</code> 关键字可以保证代码块的串行执行。</p><p>在 <code>ruby</code> 开发中往往使用第三方来保证，比如使用数据库或文件系统。其实 <code>ruby</code> 也有类似的方式来保证代码块的串行执行，它就是 <code>Mutex</code> 的 <code>synchronize</code>。</p><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">require</span> <span class="token string">'thread'</span>semaphore <span class="token operator">=</span> <span class="token constant">Mutex</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token class-name">a</span> <span class="token operator">=</span> <span class="token builtin">Thread</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token punctuation">{</span>  semaphore<span class="token punctuation">.</span>synchronize <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># access shared resource</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>b <span class="token operator">=</span> <span class="token builtin">Thread</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token punctuation">{</span>  semaphore<span class="token punctuation">.</span>synchronize <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># access shared resource</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Rails Singular Resources</title>
      <link href="/rails-singular-resources/"/>
      <url>/rails-singular-resources/</url>
      
        <content type="html"><![CDATA[<p><code>Rails</code> 中 <code>Controller</code> 如果不是复数，写 <code>path</code> 或 <code>url</code> 的时候就必须加上 <code>index</code>，这样看上去就很 <code>low</code>。</p><pre class=" language-ruby"><code class="language-ruby">resources <span class="token symbol">:photo</span> <span class="token keyword">do</span>    collection <span class="token keyword">do</span>        get <span class="token string">'search'</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment" spellcheck="true"># search_photo_index GET    /photo/search(.:format)</span></code></pre><p>我们查看 <a href="http://guides.rubyonrails.org/routing.html#singular-resources" target="_blank" rel="noopener">文档</a>，发现可以这样做</p><pre class=" language-ruby"><code class="language-ruby">resource <span class="token symbol">:photo</span><span class="token punctuation">,</span> controller<span class="token punctuation">:</span> photo <span class="token keyword">do</span>    collection <span class="token keyword">do</span>        get <span class="token string">'search'</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment" spellcheck="true"># search_photo GET    /photo/search(.:format)</span></code></pre><p>需要注意的是经过这样修改后，访问 <code>/photo</code> 不再调用 <code>index action</code> 而是调用 <code>show action</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Rails </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Web 文件下载和查看</title>
      <link href="/web-wen-jian-xia-zai-he-cha-kan/"/>
      <url>/web-wen-jian-xia-zai-he-cha-kan/</url>
      
        <content type="html"><![CDATA[<p>在浏览器中点击一个文件链接，会被浏览器直接打开或者下载。<br>其实浏览器的行为是可以人为控制的，最简单的方法是使用 <code>HTML5 download Attribute</code>。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- will download as "expenses.pdf" --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/files/expenses.pdf<span class="token punctuation">"</span></span> <span class="token attr-name">download</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>expenses.pdf<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Download Your Expense Report<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>这种方式虽然简单，但是兼容性不太好。查看<a href="http://caniuse.com/download" target="_blank" rel="noopener">http://caniuse.com/download</a>，我们可以发现很多版本都不支持这个属性。</p><p>浏览器行为是由 <code>HTTP Head</code> 中的 <code>Content-Disposition</code> 来控制的，例如</p><pre><code>Content-Disposition: attachment; filename=&quot;fname.txt&quot;</code></pre><p>它的意思是将该文件作为附件，并且下载的文件名是 <code>fname.txt</code>。</p><p>如果使用 <code>S3</code> 下载文件，使用 <code>AWS</code> 的 <code>api</code> 可以生成下载的 <code>url</code>:</p><pre class=" language-ruby"><code class="language-ruby">url <span class="token operator">=</span> object<span class="token punctuation">.</span><span class="token function">url_for</span><span class="token punctuation">(</span><span class="token symbol">:read</span><span class="token punctuation">,</span> response_content_disposition<span class="token punctuation">:</span> <span class="token string">"attachment; filename=\"<span class="token interpolation"><span class="token delimiter tag">#{</span>filename<span class="token delimiter tag">}</span></span>\""</span><span class="token punctuation">)</span></code></pre><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul><li><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html" target="_blank" rel="noopener">http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html</a></li><li><a href="http://docs.aws.amazon.com/AWSRubySDK/latest/AWS/S3/S3Object.html" target="_blank" rel="noopener">http://docs.aws.amazon.com/AWSRubySDK/latest/AWS/S3/S3Object.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> HTML5 </tag>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Siege</title>
      <link href="/siege/"/>
      <url>/siege/</url>
      
        <content type="html"><![CDATA[<p><code>siege</code> 围攻是一个压力测试和评测工具，设计用于 <code>web</code> 开发这评估应用在压力下的承受能力。</p><p>可以模拟对一个 <code>web</code> 站点进行多用户的并发访问，记录每个用户所有请求过程的响应时间，并在一定数量的并发访问下重复进行。</p><h3 id="在-Mac-OS-X-下安装"><a href="#在-Mac-OS-X-下安装" class="headerlink" title="在 Mac OS X 下安装"></a>在 <code>Mac OS X</code> 下安装</h3><pre class=" language-sh"><code class="language-sh">wget http://download.joedog.org/siege/siege-3.0.5.tar.gztar -xvf siege-latest.tar.gzcd siege-*./configuremakesudo make install</code></pre><p>完毕后，查看是否安装成功，使用<code>which siege</code></p><h3 id="在-Ubuntu-下安装"><a href="#在-Ubuntu-下安装" class="headerlink" title="在 Ubuntu 下安装"></a>在 <code>Ubuntu</code> 下安装</h3><pre class=" language-sh"><code class="language-sh">sudo apt-cache search siegesudo apt-get install siege </code></pre><p>现在可以开始使用这个工具了，例如</p><pre class=" language-sh"><code class="language-sh">siege -c 300 -t 100s 127.0.0.1:3000</code></pre><p>参数详解</p><pre class=" language-sh"><code class="language-sh">-C,或–config 在屏幕上打印显示出当前的配置,配置是包括在他的配置文件$HOME/.siegerc中,可以编辑里面的参数,这样每次siege 都会按照它运行.  -v 运行时能看到详细的运行信息  -c n,或–concurrent=n 模拟有n个用户在同时访问,n不要设得太大,因为越大,siege 消耗本地机器的资源越多  -i,–internet 随机访问urls.txt中的url列表项,以此模拟真实的访问情况(随机性),当urls.txt存在是有效  -d n,–delay=n hit每个url之间的延迟,在0-n之间  -r n,–reps=n 重复运行测试n次,不能与 -t同时存在  -t n,–time=n 持续运行siege ‘n’秒(如10S),分钟(10M),小时(10H)  -l 运行结束,将统计数据保存到日志文件中siege .log,一般位于/usr/local/var/siege .log中,也可在.siegerc中自定义  -R SIEGERC,–rc=SIEGERC 指定用特定的siege 配置文件来运行,默认的为$HOME/.siegerc  -f FILE, –file=FILE 指定用特定的urls文件运行siege ,默认为urls.txt,位于siege 安装目录下的etc/urls.txt  -u URL,–url=URL 测试指定的一个URL,对它进行”siege “,此选项会忽略有关urls文件的设定  </code></pre><p>结果说明</p><pre class=" language-sh"><code class="language-sh">Transactions: 30000 hits //完成30000次处理  Availability: 100.00 % //100.00 % 成功率  Elapsed time: 68.59 secs //总共使用时间  Data transferred: 817.76 MB //共数据传输 817.76 MB  Response time: 0.04 secs //响应时间，显示网络连接的速度  Transaction rate: 437.38 trans/sec //平均每秒完成 437.38 次处理  Throughput: 11.92 MB/sec //平均每秒传送数据  Concurrency: 17.53 //实际最高并发连接数  Successful transactions: 30000 //成功处理次数  Failed transactions: 0 //失败处理次数  Longest transaction: 3.12 //每次传输所花最长时间  Shortest transaction: 0.00 //每次传输所花最短时间  </code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Siege </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git 彻底删除文件</title>
      <link href="/git-che-di-shan-chu-wen-jian/"/>
      <url>/git-che-di-shan-chu-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>一般 <code>git</code> 删除文件使用 <code>git rm</code> 就可以了，但是有时候某些文件你甚至不想让它出现在 <code>git</code> 的 <code>log</code>中。</p><p><code>github</code> 有<a href="https://help.github.com/articles/remove-sensitive-data" target="_blank" rel="noopener">一篇文章</a>详细说明了如何操作，经过尝试是可以成功将文件彻底删除，在 <code>log</code> 中都找不到。</p><p>比如删除根目录下的 <code>file</code> 文件夹彻底删除: </p><pre class=" language-sh"><code class="language-sh">git filter-branch --force --index-filter \  'git rm -rf -r --cached --ignore-unmatch file' \  --prune-empty --tag-name-filter cat -- --all</code></pre><p>然后: </p><pre class=" language-sh"><code class="language-sh">git push origin master --force</code></pre><p>这样 <code>git</code> 仓库中这个文件夹就被彻底删除了。</p><p>如果你还想清除本地的一些缓存，可以依次进行下面几部操作 </p><pre class=" language-sh"><code class="language-sh">rm -rf .git/refs/original/`git reflog expire --expire=now --allgit gc --prune=nowgit gc --aggressive --prune=now</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP 神奇的分号</title>
      <link href="/php-shen-qi-de-fen-hao/"/>
      <url>/php-shen-qi-de-fen-hao/</url>
      
        <content type="html"><![CDATA[<p>今天在开发过程中，遇到两种分号的神奇问题，特此记录。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token string">'我是正常的分号'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'我是神奇的分号'</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>用肉眼无法分辨两种分号的区别，如果你使用 <code>win</code> 平台，上面两条语句都可以运行。但是如果你是 <code>unix</code> 或是 <code>linux</code> 则是语法错误。</p><p>根本原因是这是两种分号，他们的字符编码不同，<code>win</code> 同时支持这两种分号，而 <code>unix</code> 或是 <code>linux</code> 只支持其中一种。</p><p>这个现象和字母的大小写很类似，<code>win</code> 不区分大小写，而 <code>unix</code> 或是 <code>linux</code> 区分大小写。</p><p>使用下面这段代码就可以证明我们的猜想</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">';'</span> <span class="token operator">==</span> <span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">'相等'</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">'不相等'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决 JavaScript 指向不明</title>
      <link href="/jie-jue-javascript-zhi-xiang-bu-ming/"/>
      <url>/jie-jue-javascript-zhi-xiang-bu-ming/</url>
      
        <content type="html"><![CDATA[<p>用面向对象的方式编写 <code>JavaScript</code> 时，在类中经常会出现 <code>this</code> 指向不明的问题。</p><p>解决这个问题很简单，在对象中将 <code>this</code> 指定给一个变量，然后都使用这个对象就可以了。</p><p>例如在类文件的最开始加上下述代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></code></pre><p>这样在这个类中，<code>self</code> 就指向了 <code>this</code>，我们使用 <code>self</code> 这个变量，就可以不用担心 <code>this</code> 指向不明的问题了。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git 忽略文件</title>
      <link href="/git-hu-lue-wen-jian/"/>
      <url>/git-hu-lue-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>使用 <code>git</code> 时，经常需要忽略一些文件，比如一些 <code>IDE</code> 生成的配置文件。</p><p>在项目目录加上 <code>.gitignore</code> 文件，然后加入需要忽略文件的文件名就可以了。</p><pre><code>.project</code></pre><p>需要注意的是，如果需要忽略 <code>.gitignore</code> 文件，那么文件中就要加上 <code>.gitignore</code></p><pre><code>.project.gitignore</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript 变量声明提前</title>
      <link href="/javascript-bian-liang-sheng-ming-ti-qian/"/>
      <url>/javascript-bian-liang-sheng-ming-ti-qian/</url>
      
        <content type="html"><![CDATA[<p><code>JavaScript</code> 使用了函数作用域，变量在声明它们的函数体以及这个函数体嵌套的任意函数体内都是有定义的。</p><p>到底是什么意思呢？我们来看下面这段代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'global'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'local'</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>你可能认为输出是</p><pre><code>global  local  </code></pre><p>但是运行一下你就会发现实际结果是</p><pre><code>undefined  local  </code></pre><p>深入研究你会发现就算是你使用传递参数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'global'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'local'</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>实际结果依然是</p><pre><code>undefined  local  </code></pre><p>或者代码改写为</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'global'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> scope<span class="token punctuation">;</span>  <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'local'</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>实际结果仍然是</p><pre><code>undefined  </code></pre><p>为什么，后面的代码能够影响到前面的代码？</p><p>照成这种结果的原因的就是前面提到的函数作用域，在 <code>JavaScript</code> 中上面的代码实际上是这样的</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'global'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> scope<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'local'</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>JavaScript</code> 这个特性被非正式地称为声明提前，即函数里声明的所有变量都被提前至函数体的顶部，但是这个声明提前至声明却不赋值。</p><p>由于拥有这种特性，在编写代码时一些程序员特意将变量声明放在函数体的顶部，而不是像其他语言中让变量声明和使用变量的代码尽量靠近。</p><p>所以在函数体中使用到 <code>var</code> 来声明变量时，记得将声明和赋值语句放在函数体的顶部，避免因为这种特性造成变量值为 <code>undefined</code> 的 <code>BUG</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP 冒泡排序</title>
      <link href="/php-mou-pao-pai-xu/"/>
      <url>/php-mou-pao-pai-xu/</url>
      
        <content type="html"><![CDATA[<p>使用递归实现冒泡排序</p><p><code>PHP</code> 多递归时需要 <code>return</code>，如下述代码中</p><pre class=" language-php"><code class="language-php"><span class="token keyword">return</span> <span class="token function">bubblesort</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">,</span> <span class="token variable">$count</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果改为</p><pre class=" language-php"><code class="language-php"><span class="token function">bubblesort</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">,</span> <span class="token variable">$count</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上层就接不到值，即结果为 <code>null</code></p><p>完整的代码实现</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//产生10个1到100的随机数</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* * 冒泡排序 */</span><span class="token keyword">function</span> <span class="token function">bubblesort</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">,</span> <span class="token variable">$count</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$count</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//排序结束</span>    <span class="token keyword">return</span> <span class="token variable">$array</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$count</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将两个相邻的随机数做比较，</span>    <span class="token comment" spellcheck="true">//当第$i个随机数大于第$i+1个随机数时，</span>    <span class="token comment" spellcheck="true">//互换它们的位置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$tmp</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//PHP中递归需要return，否则只能得到null</span>  <span class="token keyword">return</span> <span class="token function">bubblesort</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">,</span> <span class="token variable">$count</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$count</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$new_array</span> <span class="token operator">=</span> <span class="token function">bubblesort</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">,</span> <span class="token variable">$count</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$new_array</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP 工厂方法模式</title>
      <link href="/php-gong-han-fang-fa-mo-shi/"/>
      <url>/php-gong-han-fang-fa-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>简单工厂其实不是一个设计模式，反而比较像是一种编程习惯。</p><p>有些开发人员的确是把这个编程习惯误认为是工厂模式。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//比萨商店</span><span class="token keyword">class</span> <span class="token class-name">PizzaStore</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token variable">$Factory</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$factory</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">Factory</span> <span class="token operator">=</span> <span class="token variable">$factory</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">orderPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">Factory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$Pizza</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//简单比萨工厂</span><span class="token keyword">class</span> <span class="token class-name">SimplePizzaFactory</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'cheese'</span> <span class="token operator">==</span> <span class="token variable">$type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token string">'pepperoni'</span> <span class="token operator">==</span> <span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PepperoniPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$Pizza</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>工厂方法模式 <code>Factory Method Pattern</code>，定义了一个创建对象的接口，但由子类决定要实例化的是哪一个。</p><p>工厂方法让类把实例化推迟到子类。</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//比萨接口</span><span class="token keyword">interface</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//比萨1</span><span class="token keyword">class</span> <span class="token class-name">CheesePizza</span> <span class="token keyword">implements</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'CheesePizza prepare&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'CheesePizza bake&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'CheesePizza cut&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'CheesePizza box&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//比萨2</span><span class="token keyword">class</span> <span class="token class-name">PepperoniPizza</span> <span class="token keyword">implements</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'PepperoniPizza prepare&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'PepperoniPizza bake&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'PepperoniPizza cut&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'PepperoniPizza box&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//纽约比萨1</span><span class="token keyword">class</span> <span class="token class-name">NYCheesePizza</span> <span class="token keyword">implements</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NYCheesePizza prepare&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NYCheesePizza bake&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NYCheesePizza cut&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NYCheesePizza box&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//纽约比萨2</span><span class="token keyword">class</span> <span class="token class-name">NYPepperoniPizza</span> <span class="token keyword">implements</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NYPepperoniPizza prepare&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NYPepperoniPizza bake&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NYPepperoniPizza cut&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NYPepperoniPizza box&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//芝加哥比萨1</span><span class="token keyword">class</span> <span class="token class-name">ChicagoCheesePizza</span> <span class="token keyword">implements</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'ChicagoCheesePizza prepare&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'ChicagoCheesePizza bake&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'ChicagoCheesePizza cut&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'ChicagoCheesePizza box&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//芝加哥比萨2</span><span class="token keyword">class</span> <span class="token class-name">ChicagoPepperoniPizza</span> <span class="token keyword">implements</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'ChicagoPepperoniPizza prepare&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'ChicagoPepperoniPizza bake&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'ChicagoPepperoniPizza cut&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'ChicagoPepperoniPizza box&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义比萨商店</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">PizzaStore</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">orderPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$Pizza</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">abstract</span> <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//纽约比萨店</span><span class="token keyword">class</span> <span class="token class-name">NYPizzaStore</span> <span class="token keyword">extends</span> <span class="token class-name">PizzaStore</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'cheese'</span> <span class="token operator">==</span> <span class="token variable">$type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NYCheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token string">'pepperoni'</span> <span class="token operator">==</span> <span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NYPepperoniPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$Pizza</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//芝加哥比萨店</span><span class="token keyword">class</span> <span class="token class-name">ChicagoPizzaStore</span> <span class="token keyword">extends</span> <span class="token class-name">PizzaStore</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'cheese'</span> <span class="token operator">==</span> <span class="token variable">$type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChicagoCheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token string">'pepperoni'</span> <span class="token operator">==</span> <span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChicagoPepperoniPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$Pizza</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$NYPizzaStore</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NYPizzaStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ChicagoPizzaStore</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChicagoPizzaStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$NYPizzaStore</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">orderPizza</span><span class="token punctuation">(</span><span class="token string">'cheese'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ChicagoPizzaStore</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">orderPizza</span><span class="token punctuation">(</span><span class="token string">'pepperoni'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出</p><pre><code>NYCheesePizza prepare  NYCheesePizza bake  NYCheesePizza cut  NYCheesePizza box  ChicagoPepperoniPizza prepare   ChicagoPepperoniPizza bake   ChicagoPepperoniPizza cut  ChicagoPepperoniPizza box  </code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP 装饰者模式</title>
      <link href="/php-zhuang-shi-zhe-mo-shi/"/>
      <url>/php-zhuang-shi-zhe-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>装饰者模式 <code>Decorator Pattern</code> ，动态地将责任附加到对象上。</p><p>若要扩展功能，装饰者提供了比继承更有弹性的替代方案。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//饮料抽象类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Beverage</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token variable">$description</span> <span class="token operator">=</span> <span class="token string">'Unknown Beverage'</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">description</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">function</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调料抽象类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CondimentDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">Beverage</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//书中的JAVA代码里这里是一个抽象方法，PHP不允许这么做</span>  <span class="token comment" spellcheck="true">//public abstract function getDescription();</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//饮料1</span><span class="token keyword">class</span> <span class="token class-name">Espresso</span> <span class="token keyword">extends</span> <span class="token class-name">Beverage</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">description</span> <span class="token operator">=</span> <span class="token string">'Espresso'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1.99</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//饮料2</span><span class="token keyword">class</span> <span class="token class-name">HouseBlend</span> <span class="token keyword">extends</span> <span class="token class-name">Beverage</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">description</span> <span class="token operator">=</span> <span class="token string">'House Blend Coffee'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0.89</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调料1</span><span class="token keyword">class</span> <span class="token class-name">Mocha</span> <span class="token keyword">extends</span> <span class="token class-name">CondimentDecorator</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token variable">$beverage</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$beverage</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">beverage</span> <span class="token operator">=</span> <span class="token variable">$beverage</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">beverage</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">', Mocha'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0.2</span> <span class="token operator">+</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">beverage</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//一杯普通的饮料</span><span class="token variable">$beverage</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Espresso</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'Description:'</span><span class="token punctuation">.</span><span class="token variable">$beverage</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;br/>Cost:'</span><span class="token punctuation">.</span><span class="token variable">$beverage</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br/>'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一杯普通的饮料</span><span class="token variable">$beverage2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HouseBlend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加一点调料</span><span class="token variable">$beverage2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mocha</span><span class="token punctuation">(</span><span class="token variable">$beverage2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'Description:'</span><span class="token punctuation">.</span><span class="token variable">$beverage2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;br/>Cost:'</span><span class="token punctuation">.</span><span class="token variable">$beverage2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br/>'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//再多加一点调料</span><span class="token variable">$beverage2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mocha</span><span class="token punctuation">(</span><span class="token variable">$beverage2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'Description:'</span><span class="token punctuation">.</span><span class="token variable">$beverage2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;br/>Cost:'</span><span class="token punctuation">.</span><span class="token variable">$beverage2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br/>'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//再多加一点调料</span><span class="token variable">$beverage2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mocha</span><span class="token punctuation">(</span><span class="token variable">$beverage2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'Description:'</span><span class="token punctuation">.</span><span class="token variable">$beverage2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;br/>Cost:'</span><span class="token punctuation">.</span><span class="token variable">$beverage2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br/>'</span><span class="token punctuation">;</span></code></pre><p>输出</p><pre><code>Description:Espresso   Cost:1.99   Description:House Blend Coffee, Mocha  Cost:1.09  Description:House Blend Coffee, Mocha, Mocha  Cost:1.29  Description:House Blend Coffee, Mocha, Mocha, Mocha  Cost:1.49  </code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP 抽象工厂模式</title>
      <link href="/php-chou-xiang-gong-han-mo-shi/"/>
      <url>/php-chou-xiang-gong-han-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>抽象工厂模式 <code>Abstract Factory Pattern</code>，提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//定义比萨商店</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">PizzaStore</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">orderPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$Pizza</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$Pizza</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">abstract</span> <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//纽约比萨店</span><span class="token keyword">class</span> <span class="token class-name">NYPizzaStore</span> <span class="token keyword">extends</span> <span class="token class-name">PizzaStore</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token variable">$PizzaIngredientFactory</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NYPizzaIngredientFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'cheese'</span> <span class="token operator">==</span> <span class="token variable">$type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheesePizza</span><span class="token punctuation">(</span><span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token string">'clam'</span> <span class="token operator">==</span> <span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClamPizza</span><span class="token punctuation">(</span><span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$Pizza</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//芝加哥比萨店</span><span class="token keyword">class</span> <span class="token class-name">ChicagoPizzaStore</span> <span class="token keyword">extends</span> <span class="token class-name">PizzaStore</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token variable">$PizzaIngredientFactory</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChicagoPizzaIngredientFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'cheese'</span> <span class="token operator">==</span> <span class="token variable">$type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheesePizza</span><span class="token punctuation">(</span><span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token string">'clam'</span> <span class="token operator">==</span> <span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$Pizza</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClamPizza</span><span class="token punctuation">(</span><span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$Pizza</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//原料工厂接口</span><span class="token keyword">interface</span> <span class="token class-name">PizzaIngredientFactory</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createDough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createCheese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createVeggies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createPepperoni</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createClam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//纽约原料工厂</span><span class="token keyword">class</span> <span class="token class-name">NYPizzaIngredientFactory</span> <span class="token keyword">implements</span> <span class="token class-name">PizzaIngredientFactory</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createDough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NY createDough&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NY createSauce&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createCheese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NY createCheese&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createVeggies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NY createVeggies&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createPepperoni</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NY createPepperoni&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createClam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'NY createClam&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//芝加哥原料工厂</span><span class="token keyword">class</span> <span class="token class-name">ChicagoPizzaIngredientFactory</span> <span class="token keyword">implements</span> <span class="token class-name">PizzaIngredientFactory</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createDough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Chicago createDough&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Chicago createSauce&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createCheese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Chicago createCheese&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createVeggies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Chicago createVeggies&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createPepperoni</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Chicago createPepperoni&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createClam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'Chicago createClam&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//比萨类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>  <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'bake&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'cut&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'box&lt;br />'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//比萨1</span><span class="token keyword">class</span> <span class="token class-name">CheesePizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span> <span class="token operator">=</span> <span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//向原料工厂请求原料</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createDough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createCheese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//比萨2</span><span class="token keyword">class</span> <span class="token class-name">ClamPizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span> <span class="token operator">=</span> <span class="token variable">$PizzaIngredientFactory</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//向原料工厂请求原料</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createDough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createSauce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createCheese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">PizzaIngredientFactory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createClam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$NYPizzaStore</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NYPizzaStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ChicagoPizzaStore</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChicagoPizzaStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$NYPizzaStore</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">orderPizza</span><span class="token punctuation">(</span><span class="token string">'cheese'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ChicagoPizzaStore</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">orderPizza</span><span class="token punctuation">(</span><span class="token string">'clam'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出</p><pre><code>NY createDough  NY createSauce  NY createCheese  bake  cut  box  Chicago createDough  Chicago createSauce  Chicago createCheese  Chicago createClam  bake  cut  box</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>斯坦福《编程方法》</title>
      <link href="/si-tan-fu-bian-cheng-fang-fa/"/>
      <url>/si-tan-fu-bian-cheng-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>课程介绍: </p><p>「编程方法」本课程是最大的编程入门课程，也是斯坦福大学主要课程之一。介绍了当代程序设计基本思想: 面向对象，模块化，封装，抽象化与测试。《编程方法》将良好的编程思想连同广泛应用的Java语言一同讲授。着重教授良好的编程风格和Java语言的特色。这门同样课适合文科，主修社会科学的同学和编程爱好者学习观看。其实每年都有很多非工程系同学选修这门课。</p><p>基本要求: 本课程不要求具备编程基础，但要求多下功夫！</p><p>课程类型: 计算机</p><p>课程主讲人: Mehran Sahami教授</p><p>Mehran Sahami刚加入斯坦福大学计算机系时任副教授，本科教育附主任和教务处主任三职。2001年至2006年，任斯坦福大学计算机系讲师。2002至 2007年，任谷歌公司的高级研究员，目前依然是研究团队的顾问。Mehran Sahami的研究方向主要有计算机科学教育，机器学习和网络信息挖掘。 在此之前，Mehran Sahami是Epiphany公司的高级工程经理。去Epiphany工作前，他在斯坦福大学的计算机系拿到了博士学位。他曾今也是斯坦福大学的本科 生，一直深爱着这方土地，至今不愿离去。工作之余，喜欢跟家人团聚，喜欢弹吉他，喜欢户外旅行，还喜欢睡觉（虽然最近睡的越来越少）。</p><p>课程简介: </p><p>第 1 课 课程简介</p><p>欢迎来到CS106A，授课人员，为什么称之为编程方法？，你真的适合学习这门课程吗？课程常规，作业与评分，课外拓展，期中期末考试，成绩评定细则，行为准则，为何要从Karel学起？</p><p>第 2 课 欢迎来到 Karel 的世界</p><p>讲义相关，注册讨论小组，Karel基本命令，算法与程序孰轻孰重，Karel程序语法，运行一个Karel程序，创建函数的方法，超级Karel，For循环，While循环，Karel条件语句，If条件语句，综述。</p><p>第 3 课 Karel 与 Java</p><p>Karel 与Java，常见的错误，注释，前提条件和后续条件，分解，例程序DoubleBeeper，养成良好编程习惯重要性，正确的分解，例程序CleanUpKarel。</p><p>第 4 课 计算科学发展史</p><p>计算机科学与程序设计的千丝万缕，电脑懂什么，编译过程，Java-面向对象的程序设计语言，继承，类，acm.program层次结构，第一个Java程序，例程序ConsoleProgram，图形化界面，例程序Sending-Messages-to-a-GLabel。</p><p>第 5 课 变量</p><p>变量的数据类型，调用变量相关语法，类的类型，对象变量，调用类成员函数的方法，图形坐标，对类GObject以及其子类的操作，描画几何对象，例程序FunGraphics，表达式与操作符。</p><p>第 6 课 操作符</p><p>readInt() 和 readDouble()函数，整形与浮点数的除法运算操作符，操作符优先级，类型转换，常量，布尔数据类型，值的比较，布尔表达式，短路求值，语句块，变量的作用域，if套嵌，switch语句，for循环语句，while循环语句。</p><p>第 7 课 循环与“一半”问题</p><p>For循环与While循环的对比，例程序CheckerBoad，在Java中创建函数，创建函数举例，FactorialExample程序，用函数返回对象。</p><p>第 8 课 信息隐藏</p><p>Void函数类型，在函数间传递参数，函数的缺陷，类的使用，整体变量与局部变量，例程序RandomGenerator，例程序RollDice，setseed()函数。</p><p>第 9 课 字符串</p><p>写一个类，公有和私有的区别，构造函数，this关键词，类的使用，对象的调用需要使用引用方式，将类作为变量，Javadoc技术，例程序Student。</p><p>第 10 课 私有变量的重要性</p><p>扩展Student类，函数重写，acm.graphics程序包，GCanvas，GObjects中的常用函数，其中的接口与函数，BouncingBall例程序，GLable类中的几何学，GArc类。</p><p>第 11 课 Gimage类</p><p>GPolygon类，GCompound类，事件驱动程序，例程序ClickForFace，响应鼠标操作，响应键盘操作，例程序UFO。</p><p>第 12 课 枚举</p><p>字符，Unicode标准下的ASCII码，字符的读取，字符中的数学，基本类型char，字符对象，字符串及其操作。</p><p>第 13 课 对字符串的处理</p><p>编译器，加密。</p><p>第 14 课 内存</p><p>存放不同变量的内存区块，内存分配机制，对指针的看法，指针趣味小视频。</p><p>第 15 课 指针要点回顾</p><p>为什么要通过引用方式调用类，将封装类作为基本数据类型，文件，打开、读取、关闭文件的函数，异常状况，文件写操作函数。</p><p>第 16 课 数组</p><p>创建数组，++操作符，数组的真实长度与有效长度，将数组作为参数，初始化数组，数组列表。</p><p>第 17 课 多维数组</p><p>类模版，ArrayList类中的函数，使用ArrayList类的例程序，Glable数组列表例程序，例程序GrayImage。</p><p>第 18 课 多维数组收尾</p><p>数组列表方式，数组列表与数组的优劣分析，调试，程序调试的方法，Eclipse中的调试器。</p><p>第 19 课 接口</p><p>如何使用接口，映射，HashMap类，HashMap中的函数，中继器，HashMap例程序。</p><p>第 20 课 图形用户界面</p><p>Java程序中的Interactor，Swing Interactor层次结构，窗口区域，创建Interactor，例程序，探索更多Interactor，例程序InteractorDrawFace。</p><p>第 21 课 Interactor与Listener回顾</p><p>例程序，例程序中应用的两种方法——使用getSouce或getActionCommand函数，例程序TextField，布局设计，温度换算例程序，例程序TextAndGraphics。</p><p>第 22 课 NameSurfer概述</p><p>组件与容器，容器的监听器，设计可扩展程序，ComponentListener接口，例程序MusicShop，例程序MusicShopDisplay。</p><p>第 23 课 搜索，排序与算法效率分析</p><p>课程材料介绍——搜索，排序及其算法效率分析，搜索，线性搜索，线性搜索的效率分析，二分法搜索，二分法搜索的效率分析，排序，选择排序算法，选择排序效率分析，基数排序算法。</p><p>第 24 课 管理大型数据中的良好软件工程原理</p><p>设计思想，数据搜集层次结构，数据搜集实用函数，例程序: 在线音乐商店FlyTunes,定义歌曲类，定义专辑类，鉴证程序运行，对所需数据结构的思考，数据的重复利用，浅拷贝与深拷贝。</p><p>第 25 课 设计实用社交网络</p><p>思考程序所需功能，分离现象的六种程度，并行性，一个线程，运行接口，创建一个线程，例程序，在线程间共享数据。</p><p>第 26 课 介绍Java标准库</p><p>JAR文件介绍，创建JAR文件，创建applet小程序，脱离ACM运行库创建标准Java程序，其他——深入学习Java。</p><p>第 27 课 CS106A后续课程介绍</p><p>计算机专业简介，其他专业出路。</p><p>第 28 课 宣布图形比赛结果</p><p>期末复习，例题1，例题2，课程总结。</p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="第-1-课-课程简介"><a href="#第-1-课-课程简介" class="headerlink" title="第 1 课 课程简介"></a>第 1 课 课程简介</h3><p>为什么这门课叫《编程方法》，为什么不叫做《Java程序设计》？原因在于《编程方法》教授的是良好的软件工程思想，这比单纯的编程范围大得多。有些人找一本教科书，觉得看看书就能学会如何编程。其实，学会的可能只是语言结构，但只是学会语言结构远远不够。学习软件系统，开发中实用的软件工程思想才是重中之重，这正是本门课程要教授的内容。</p><p>想做编程高手，也需要掌握一种语言，无论是 Java，C，还是 C++ 等。但如果只懂得语言，并不能成为优秀的软件工程师，也不会清楚编写好软件需要的思想。除了教授语言之外本门课程将着重讲解良好的编程思想，这才是重中之重。一些坏习惯比零基础更坏。</p><p>课程网站: <a href="http://www.stanford.edu/class/cs106a" target="_blank">www.stanford.edu/class/cs106a</a></p><p>教科书: </p><ul><li>课程导论: 《卡雷尔机器人学Java》Karel the Robot Learns Java</li><li>课本: 《Java语言的科学与艺术》The Art and Science of Java</li></ul><p>很多学习计算机的同学会走入误区，仅仅学习语言本身特性，认为只要学好了语言，就能成为一个好的软件工程师。他们过于关注语言本身细节，对程序设计却没有宏观把握。写一个好程序或者学习如何编程跟学习成为作家差不多。关键在于光靠套公式，套模板是写不出好文章的。</p><p>瑞奇·帕提斯（Rich Pattis）提出教授计算机科学入门课程，先把各种语言的繁杂指令和各种语言的差异放一边，从最简单的教起。以便能更快的学习各种指令，这样就具备了掌握程序设计语言的基本素养，可以把主要精力放在软件工程思想方面。</p><hr><h3 id="第-2-课-欢迎来到-Karel-的世界"><a href="#第-2-课-欢迎来到-Karel-的世界" class="headerlink" title="第 2 课 欢迎来到 Karel 的世界"></a>第 2 课 欢迎来到 Karel 的世界</h3><p>解决问题的方法不止一个，我们只需要选择其中一个，这就是编程的艺术。</p><p>算法和程序二者的区别在于，算法是做事情的步骤，将程序不断分解，分成很多小步骤，逐步求精。程序则必须按照语言规则合法的组织语句。</p><p>编程时重要的一点是，不仅仅要写出计算机能读懂的程序，更要让人读得懂。这是编程风格的重要体现，也是好软件的必备条件。一个虽然能正常运行，但其他人读不懂的程序，是非常糟糕的软件工程产品。让人能读得懂这是软件工程的重要原则。</p><p>考虑程序的通用性，这点非常重要。你不会只想让程序，在一种情况下正确运行吧。除非是明确指出只需在某种情况下运行。你得使程序通用化，根据通用原则来设计，使其在满足基本规则的情况下都能正确运行。</p><hr><h3 id="第-3-课-Karel-与-Java"><a href="#第-3-课-Karel-与-Java" class="headerlink" title="第 3 课 Karel 与 Java"></a>第 3 课 Karel 与 Java</h3><p>常见错误: </p><ul><li>无限循环，即为一个无限的循环。程序的语法是正确有效的，但是程序却没有按照我们所设计的去做。这是在编程时，经常遇到的问题，不同于语法问题。</li><li>差一错误（off by one bug）简称OBOB，意思是你还差一件需要做的事情。尽管按逻辑来讲也不需要做，所以理解OBOB最好的方法是用一个具体的例子来说明。如果你要建造一个100米长的栅栏，其栅栏柱间隔为10米，那么你需要多少根栅栏柱呢？11根或9根都是正确答案，这取决于是否要在栅栏的两端树立栅栏柱，但是10根却是错误的。转换到数学，数字1到数字5一共有几个数字？这里有一个公式 从M到N，一共有 M-N+1 项.</li></ul><p>软件工程中一个重要的原则是，所写的程序不仅要机器明白，人也要能够理解。注释就能使人在读程序时能够阅读并能理解。很明显的问题，需要添加注释，说明程序中不明确的地方。另外，是程序的前提与后置条件。写明前提和后置条件可以让程序员在不知道程序内部具体的运行方式时，可以理解程序要做什么。如果所写的程序很短，哪怕只有一行，也最好加上注释，因为这可以帮助我们。</p><p>把程序具体化，这个过程称之为分解。我们从一个高阶层的描述开始，然后逐步分解，至每一小步，一直分解下去，直到步骤足够清晰明了，将步骤分解到计算机可以理解为止。我们做到了原语（primitives）这个层次时，这个分解过程就结束了，这个过程叫做逐步求精法（stepwise refinement）。</p><p>分解的概念是把事物分成更小的片段，分解成更具体的部分，分解直至原语这个层面。这整个过程称之为自顶向下设计（top-down design）。这与另一个概念相对，就是自底向上设计（bottom-up design）。自底向上设计是指，从原语开始，从低阶层开始。大部分程序员，最开始都是用这种方式。有一个心理研究表明，平均要拥有100小时的编程能力（programming proficiency）才能从自底向上的思维转变为自顶向下的思维。</p><p>分解方法（decomposition methods）: </p><ul><li>每个方法解决一个问题。</li><li>大部分方法应该在1-15行左右，如果是一行，没问题，可以写一行程序调用其他程序。这样做的目的在于可以使用新名称。</li><li>方法名应该能够描述它是做什么的，解决了什么问题。一个好的名字可以解释程序是做什么的.</li><li>方法涉及到分解的，都应该有注释，注释可以更加详细的解释这个方法是做什么的。更详细的说明，最好注明前置和后置条件。</li></ul><p>写编码的时候，你要考虑分解，用逐步求精法和加注释。对整个程序的注释以及对每个方法是注释。</p><hr><h3 id="第-4-课-计算科学发展史"><a href="#第-4-课-计算科学发展史" class="headerlink" title="第 4 课 计算科学发展史"></a>第 4 课 计算科学发展史</h3><p>了解它，学习它，运用它，爱上它（know it，learn it，live it，love it）</p><p>很多人都把计算机科学看做是编程。在编程中到底涉不涉及科学，这两者的不同之处在于，计算机科学简称为CS，是指的科学，也就是用计算机来解决问题。</p><p>计算（Computational），称之为方法（methods）。写的时候只考虑理论上是否可行，却不考虑在计算机硬件上能否操作，证明出那些函数是不可行的或可行的。科学在这里指的是解决问题和解决问题的方法，及分析那种是有效的方法，这个方法是否可以解决问题。</p><p>程序，它是指我们在想出某一解决问题的方法时，用计算机的编程方式来处理问题。它只是整个计算机科学其中的一个过程，而不是全部。有一个名言曾将程序对于计算机科学的意义比喻成望远镜对于天文学的意义。</p><hr><h3 id="第-5-课-变量"><a href="#第-5-课-变量" class="headerlink" title="第 5 课 变量"></a>第 5 课 变量</h3><p>准确的命名是一个良好的软件工程原则，考虑到名称的含义，就是要让名称具有描述性，不产生歧义。</p><p>变量这是一个内容可变的盒子，有三要素。其一，名称用来标识这个盒子。其二，类型指的是盒子里放的是什么东西。其三，值告诉我们盒子里的东西是什么。</p><p>一定要给每个变量赋一个初始值，这才是优秀的软件工程。</p><hr><h3 id="第-6-课-操作符"><a href="#第-6-课-操作符" class="headerlink" title="第 6 课 操作符"></a>第 6 课 操作符</h3><p>常量与变量的不同之处就是它不会改变。全部大写，这是写常量的传统方式，每个单词之间用下划线连接。</p><p>求余运算符只对整数适用，因为求余运算符对实数没有意义。</p><p>除法在整数和双精度上运算方法有点不同。当你在做除法时，如果两个参数均为整数，在这种情况下它会做整数除法，就是做除法后丢掉余数，所有你得到的依然是个整数。例如整数5除以整数2，你会得到结果为整数2，随之的余数1就丢掉了。要是其中有一个是实数的话，比如一个双精度实数，那么这里就会做实数除法并返回实数。所有对于这里的例子5除以2改成5除以2.0的话，结果就会得到2.5这个双精度实数而不是一个整数。</p><p>编写程序的时候如果不考虑清楚逻辑就会出现重大的BUG，而且很容易让人迷惑。</p><p>例: 不论x取任何值，P都为真，这是一个典型的漏洞。</p><pre class=" language-java"><code class="language-java">P <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>短路计算，在不同情况下他们很是有用的。例如避免除数为0的情况出现</p><p>例: 如果x等于0，直接判断为假，不用处理后面的语句。这样你就永远不会有除数为0的情况。</p><pre class=" language-java"><code class="language-java">P <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token operator">/</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>switch条件必须是整数值，不可以是双精度类型。</p><hr><h3 id="第-7-课-循环与“一半”问题"><a href="#第-7-课-循环与“一半”问题" class="headerlink" title="第 7 课 循环与“一半”问题"></a>第 7 课 循环与“一半”问题</h3><p>当不知道具体的循环次数时，使用while循环。你会去计算某些事物的执行次数（for循环），或者会在条件为真时才做某事（while），这就是两种循环的区别。</p><p>哨兵值，我们将会用一个常量去判断用户什么时候想输入数据，什么时候停止输入数据，所以在编程中这个值常被称之为哨兵。</p><p>例: 从用户那读入一连串数字，直到用户输入0才停止读入，然后计算这些数字的和。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Add</span> <span class="token keyword">extends</span> <span class="token class-name">ConsoleProgram</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SENTINEL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//哨兵</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入值总和</span>    <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">readInt</span><span class="token punctuation">(</span><span class="token string">"Enter val:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入值</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>val <span class="token operator">!=</span> SENTINEL<span class="token punctuation">)</span><span class="token punctuation">{</span>      total <span class="token operator">+=</span> val<span class="token punctuation">;</span>      val <span class="token operator">=</span> <span class="token function">readInt</span><span class="token punctuation">(</span><span class="token string">"Enter val:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Total = "</span> <span class="token operator">+</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>循环会判断如果你给的值不是哨兵值，就不会停止。</p><p>在计算机科学或者计算机编程中，我们很讨厌重复的代码。如果能够避免重复代码，即使只有一行我们都会尽力去消除。向用户询问数值的这个操作至少要执行一次，但是在第一场执行后，我们需要在循环里面重复这个操作，所以我们遇到了难题，如何避免重复的代码呢？</p><p>例: 从用户那读入一连串数字，直到用户输入0才停止读入，然后计算这些数字的和。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Add</span> <span class="token keyword">extends</span> <span class="token class-name">ConsoleProgram</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SENTINEL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//哨兵</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入值总和</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">readInt</span><span class="token punctuation">(</span><span class="token string">"Enter val:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入值</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">==</span> SENTINEL<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果输入值等于哨兵就跳出循环</span>      total <span class="token operator">+=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Total = "</span> <span class="token operator">+</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>循环会判断循环条件永远为真，看起来很奇怪。你会担心它不是一个无限循环吗？只有一种情况会被终止，我们会向用户询问数值，判断这个值是否为哨兵值。如果是，跳出循环。</p><p>break语句的作用就是它会跳出围绕代码最里面的那层循环。实际上它的用途是在循环内部检查跳出循环的条件，而不是在开头或每次进入循环的时候检查。</p><p>从编程风格来说，一个循环体内有多重终止条件是非常糟糕的。因为这会让程序员很难识别哪个条件为真，才能跳出循环。</p><p>比起用一大堆if语句来判断，稍微运用数学则来得更高明。</p><p>例: 当i+y的值为偶数时执行，为奇数时不执行。</p><pre class=" language-java"><code class="language-java">sq<span class="token punctuation">.</span><span class="token function">setFilled</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>多数情况下，return会出现在方法的结尾。但它并不只会出现在结尾，运行return时，正在执行的方法会马上停止，并且返回语句中的值或对象。</p><p>例: 比较2个数字的大小，并且返回比较大的那个数。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">></span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="第-8-课-信息隐藏"><a href="#第-8-课-信息隐藏" class="headerlink" title="第 8 课 信息隐藏"></a>第 8 课 信息隐藏</h3><p>信息隐藏，指方法的使用者不需要去关心方法内部结构，懂用就好。当在编写方法时，你应该考虑让一个方法解决一个问题，一个具有普遍意义的问题，而信息隐藏于用户。当用户调用方法时，只要程序注释里清楚解释了程序的用途，列明了参数。用户就可以不需要去看方法的内部结构，不必知道原理，也能知道如何使用此方法。如果你找到一个更加有效的方法来实现这个功能，只需要修改方法的内部结构，而用户则不必在乎方法的改变。</p><p>函数返回值，有时（当返回值为void）函数或方法不一定返回值，也不需要返回值。</p><p>传递参数时，实质上是在传递拷贝，并不是传递变量本身。</p><p>例: x输出值为3，AddFive方法只修改了x的拷贝，变量x的值并没有改变。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">AddFive</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    x <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改的是x的拷贝  </span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token function">AddFive</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x = "</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>例: x输出值为8，AddFive方法修改了x的拷贝，然后将拷贝修改后的值返回，最后将返回的拷贝x的值赋值给变量x。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">AddFive</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    x <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改的是x的拷贝  </span>  <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回拷贝修改后的值  </span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> <span class="token function">AddFive</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将返回的拷贝x的值赋值给变量x  </span>  <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x = "</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>当调用类的时候，分别有类的客户（client）和类的实现者（implementor）这两个概念。类的客户指类的使用者，当你调用ACM库里面的类使用时，你就是客户。而当你自己编写类，设定类的用途，那你就是实现者。</p><p>如果希望某个对象或变量，都能被整个类中的所有方法共有，就要用到实例变量（instance variable）。实例变量我们简称为ivar，它是一个存在于整个对象中的变量，而令所有方法都能指向这个变量。</p><p>实例变量在类中声明，对类里所有的东西都可见，所有方法都能访问。只要对象存在，实例变量就存在。常量实际上是实例变量的一种，它们是final的实例变量，也就是说它们不会改变。</p><p>局部变量（locals）在方法中声明，只在方法中可视。当方法结束，局部变量也随之结束。</p><p>当你要做的计算只在你使用的方法里有效时（即局部计算）使用局部变量，实例变量是在方法的调用之间存储某些值时使用，你可以把它看成是对象的状态。</p><hr><h3 id="第-9-课-字符串"><a href="#第-9-课-字符串" class="headerlink" title="第 9 课 字符串"></a>第 9 课 字符串</h3><p>字符串（String）是一种类型，意思是字符的有序结合，字符串实际上是一个文本。</p><p>类不具体定义父类，结果就是默认继承类object。</p><p>包的意思是指类的集合，具有相关性类的集合。</p><p>构造函数</p><ul><li>构造函数的名称与类的名称相同。</li><li>构造函数没有返回类型。</li><li>构造函数负责给予我们对象中的初始值。</li><li>构造函数在对象创建的时候被调用</li></ul><p>保持参数的名称不同于局部变量的名称，区分名称的不同。这样就不会产生混淆，这也是一个很好的编程习惯。</p><p>思考在计算机科学中很重要，重要的是要具备一个全局观，不需要过多担心细节。</p><p>当传递对象时，传递的不是对象的拷贝。传递的是对象的引用（reference），可以看做是传递对象本身。我们把它称为引用，实际上是一种指向对象的方式。虽然传递对象时，只是传递引用的拷贝，但是它们指向的是同一个对象。</p><p>类变量（class variable）被所有对象共有，是一个被类中所有对象共有的变量，而实例变量则属于对象私有，每个对象变量都是独有的。例如，圆形的半径都是每个圆形独有的，但是π是所有圆形共有的。类变量也称作静态变量（static variable），它不一定是常量，也不一定是最终值。</p><p>javadoc是java的文件材料系统（documentation system）。在注释中需要加上一个特殊标记使得javadoc系统理解。这个系统可以通过注释解释你的代码内容，同时生成html页面。这样别人在试图理解你的代码内容时，可以通过阅读这个html，而不需要通读你所写的代码。</p><h2 id="Java的acm库Javadoc学生版本"><a href="#Java的acm库Javadoc学生版本" class="headerlink" title="Java的acm库Javadoc学生版本"></a><a href="http://jtf.acm.org/javadoc/student" target="_blank" rel="noopener">Java的acm库Javadoc学生版本</a></h2><h3 id="第-10-课-私有变量的重要性"><a href="#第-10-课-私有变量的重要性" class="headerlink" title="第 10 课 私有变量的重要性"></a>第 10 课 私有变量的重要性</h3><p>重写的意思是指子类覆盖父类的方法。方法的名字必须相同，参数也需要完全一样。</p><p>编写代码需要尝试去做，可以阅读教材，但是真正动手实验才是王道。</p><hr><h3 id="第-11-课-Gimage类"><a href="#第-11-课-Gimage类" class="headerlink" title="第 11 课 Gimage类"></a>第 11 课 Gimage类</h3><p>修改很少的代码就能实现新的功能，这就是面向对象程序的美好之处。</p><p>事件驱动（event-driven）。程序可以检测到某些正在发生的事件，并对它们做出反应。在计算机中监听器（listener）有两种，鼠标监听器和键盘监听器，也就是从鼠标中得到是事件以及从键盘中得到的事件。</p><hr><h3 id="第-12-课-枚举"><a href="#第-12-课-枚举" class="headerlink" title="第 12 课 枚举"></a>第 12 课 枚举</h3><p>枚举是个基本的概念，把它想成一系列相关的项目。通常我们给出一些数字，这样我们就可以追踪它们了。</p><p>Java中重要的是要要记住字符串是无法改变的。当我们对字符串修改时，实际上是创建了一个新的字符串，也就是对之前的字符串的更改版本。</p><hr><h3 id="第-13-课-对字符串的处理"><a href="#第-13-课-对字符串的处理" class="headerlink" title="第 13 课 对字符串的处理"></a>第 13 课 对字符串的处理</h3><p>编译器（tokenizer）是个计算机术语。比如有一个字符串文本，我们像把它们分解成片段，这就叫做编译器。</p><p>加密（encryption）实际上就是传递秘密的信息。</p><hr><h3 id="第-14-课-内存"><a href="#第-14-课-内存" class="headerlink" title="第 14 课 内存"></a>第 14 课 内存</h3><p>说到存储，首先要知道的是RAM内存，全程是随机存取存储器（random access memory）。</p><p>计算机里最简单的存储单位叫做比特，而比特（bit）其实是二进制数字（binary digit）的缩写。比特只包含0或者1这种单一的二进制数字。</p><p>计算机存储是从十六进制出发的，尽管能换算成十进制数值，但是我们还是用十六进制表示。之所以这么做，是因为我们想要区分表示存储位置的数和存储的实际内容。</p><p>凡是使用new的就是动态变量，当调用new的时候，动态变量就存储在叫做堆（heap）里面。堆中的变量不再使用时，计算机把这部分内存收回，这叫做垃圾回收（garbage collection）。</p><p>局部变量存放在一个叫栈（stack）的地方，跟堆区分开来。栈和堆的区别就在于，对栈来说，当函数中有局部变量或者参数时，在栈这个地方会自动为变量分配一些内存。当局部变量不在作用域范围内时，像是函数结束或者是运行的程序退出，导致变量不在存在，不在作用域范围内，栈会自动回收内存（java是这样的，c和c++不会自动回收）。</p><p>每个对象都有地址，计算机内部实际上是通过对象的地址来找到它们的。</p><p>栈上创建了一些存储空间，称之为栈帧（stack frame）。它在栈上记录调用函数，产生帧信息。</p><p>在对某个对象调用函数时，首先存在栈上的是对象的指针（pointer），它就是叫做this的指针。</p><p>函数运行结束，就意味执行函数时，所分配的所有内存，被计算机自动取消分配，称之为出栈（off stack）。</p><hr><h3 id="第-15-课-指针要点回顾"><a href="#第-15-课-指针要点回顾" class="headerlink" title="第 15 课 指针要点回顾"></a>第 15 课 指针要点回顾</h3><p>设两个对象相等，它们就是两个相同的对象，内存中只有其中一个对象被存储，但有两个指针或者两个指向它的指针，一般称之为指针引用。</p><p>解引用（dereference）的意思是不存在值或者随机值，指向内存某处，产生空指针错误（值为null）。</p><p>当把基本类型作为参数传递，得到的是一个基本类型的值的拷贝。当参数是对象时，实际上是在传递对象，或者说是拷贝对对象的引用。</p><p>当一个异常被引发，必然要有捕获异常。如果没有捕获异常，程序将会出错从而停止执行。try只需要包含会出现异常的代码，不要将所有代码包含在try中。</p><hr><h3 id="第-16-课-数组"><a href="#第-16-课-数组" class="headerlink" title="第 16 课 数组"></a>第 16 课 数组</h3><p>数组是一次记录大量信息的一种方法。数组的两个核心概念是: </p><ol><li>数组是有顺序（ordered）的，意思是能基于这些循序利用索引来指向数组中的元素。</li><li>类别统一（homogeneous），存储在数组中的内容都属于一个类型，而且必须是同种类型，所以说它型别统一。</li></ol><p>数组的尺寸分为实际尺寸以及有效尺寸。实际尺寸是指声明的数组尺寸，而有效尺寸是指在程序中真正使用到的尺寸。</p><p>传递数组时，数组是通过引用来传递，得到的是实际数组。用引用而不使用拷贝，这样做是出于效率原因。传递数组的单个元素，如果它们属于基本类型，那么就算它们都是数组中的元素，得到的仍然是拷贝。如果要得到引用，必须先传递整个数组。</p><p>数组表被称为template，它可以自动的增加数组的长度。</p><hr><h3 id="第-17-课-多维数组"><a href="#第-17-课-多维数组" class="headerlink" title="第 17 课 多维数组"></a>第 17 课 多维数组</h3><p>数组表，它是一个对象，它和数组很相似，但它能根据添加元素的方式改变它的尺寸。数组表作为模板，它的类型只能是对象，所以不能有基本类型的数组表。</p><p>对于基本类型，有一个等价的类型，叫做包装类（也叫封装类wrapper class），这些类是不可变对象。数组表要想使用基本类型必须使用包装类。</p><hr><h3 id="第-18-课-多维数组收尾"><a href="#第-18-课-多维数组收尾" class="headerlink" title="第 18 课 多维数组收尾"></a>第 18 课 多维数组收尾</h3><p>多维数组是由数组构成的数组，例如二维数组是数组构成的数组，三维数组是由二维数组构成的数组。</p><p>数组表最大的优点就是动态改变尺寸，如果事先不知道尺寸，就用数组表。另一个优点是，它有相当多的高级方法。缺点是效率低于数组，另一个缺点是它的语法复杂。如果事先知道数组的尺寸，它的尺寸是固定不变的，那就一定要用数组。</p><p>坏值（bad variable），在程序某种有个值，这个值不是你所要求的值。错误逻辑（faulty logic），你本想计算机操作x，但程序却让计算机操作y。这并不是所谓的电脑故障，它所做的一切都是你指示的，只是你并没有给出正确的指示。无根据的假设（unwarranted assumption），我以为值的单位是米，火箭升空前你咋不告诉我是英尺。认真考虑你的假设是什么，当方法被调用，它可以假设什么。这些大体就是调试的本质问题。</p><p>人们总有一种简单问题复杂化的倾向，很多问题本来就是简单的，所以不要认为漏洞的出现必然是一个复杂问题。有时仅仅是因为错误逻辑，或者是不小心改变了某个值，总之就是无心之举。</p><p>调试的几个基本原则: </p><ul><li>要有条理。</li><li>不要依靠直觉自以为自己知道问题在哪。</li><li>严格看待自己的代码。</li><li>相信自己，冷静，慌张于事无补。</li></ul><hr><h3 id="第-19-课-接口"><a href="#第-19-课-接口" class="headerlink" title="第 19 课 接口"></a>第 19 课 接口</h3><p>接口（interface）它就是一套方法，和某些类共用的一套方法，所以它是一套通用的功能，某些特定类中的通用功能。</p><p>迭代器（iterator）它能把一系列值罗列出来，直到数组结束。</p><hr><h3 id="第-20-课-图形用户界面"><a href="#第-20-课-图形用户界面" class="headerlink" title="第 20 课 图形用户界面"></a>第 20 课 图形用户界面</h3><p>GUI指的是图形用户界面。</p><hr><h3 id="第-21-课-Interactor与Listener回顾"><a href="#第-21-课-Interactor与Listener回顾" class="headerlink" title="第 21 课 Interactor与Listener回顾"></a>第 21 课 Interactor与Listener回顾</h3><p>不要忘记在最后添加监听器。</p><hr><h3 id="第-22-课-NameSurfer概述"><a href="#第-22-课-NameSurfer概述" class="headerlink" title="第 22 课 NameSurfer概述"></a>第 22 课 NameSurfer概述</h3><p>无</p><hr><h3 id="第-23-课-搜索，排序与算法效率分析"><a href="#第-23-课-搜索，排序与算法效率分析" class="headerlink" title="第 23 课 搜索，排序与算法效率分析"></a>第 23 课 搜索，排序与算法效率分析</h3><p>一系列信息需要查找，最简单的方法是全部看一遍，这称为线性查找。该方法查找元素所需要的运算次数和元素的个数是成线性比例的。缺点是相当的耗时。</p><p>二分查找，在每个节点都一分为二。</p><p>两个int类型加起来再除以2会产生BUG，int类型最大值大约是40亿，如果两个int的和大于最大值就会产生BUG，所以应该先分别除以2后再相加。</p><hr><h3 id="第-24-课-管理大型数据中的良好软件工程原理"><a href="#第-24-课-管理大型数据中的良好软件工程原理" class="headerlink" title="第 24 课 管理大型数据中的良好软件工程原理"></a>第 24 课 管理大型数据中的良好软件工程原理</h3><p>很多企业成功的原因，就是出色的数据管理。</p><p>你要找出你的应用所在领域的相关名词，很多时候这个名词就是你的类。除了名词，我们还需要找到动词。动词代表着与类相关的方法，某个名词有某个动作，即动词，相当于某个类调用了某个方法。</p><p>唯一标识符，它指的是某条数据的唯一的标识符，它具有唯一性和不可改变性。</p><hr><h3 id="第-25-课-设计实用社交网络"><a href="#第-25-课-设计实用社交网络" class="headerlink" title="第 25 课 设计实用社交网络"></a>第 25 课 设计实用社交网络</h3><p>社交网络基本上就是记录一些人或者个人账户以及他们之间的关系的一种方式，这是最通俗的解释。</p><p>多线程其实是控制器不断的在不同的线程中快速切换。</p><hr><h3 id="第-26-课-介绍Java标准库"><a href="#第-26-课-介绍Java标准库" class="headerlink" title="第 26 课 介绍Java标准库"></a>第 26 课 介绍Java标准库</h3><p>main方法是java类中开始运行的地方。</p><p>jar文件的含义是Java ARchive。它可以包含许多不同的东西（实际上是类似zip的压缩包），大多数时候我们用它来打包java中那些已经编译的类，即“.class”文件。</p><hr><h3 id="第-27-课-CS106A后续课程介绍"><a href="#第-27-课-CS106A后续课程介绍" class="headerlink" title="第 27 课 CS106A后续课程介绍"></a>第 27 课 CS106A后续课程介绍</h3><p>抽象编程，由C++语言讲述。我们一直都在使用一些抽象概念，比如数组表和哈希图等。在这门课中，你需要思考如何实现一个哈希图或数组表、如何让程序运行得更快而尽可能少占用内存、以及更多的编程技巧比如递归。</p><p>离散数学，讲述计算机中的逻辑。图形、社交网络和六度分离等，它们都是离散数学的一部分。</p><p>人工智能，简称AI。它包含很多分支领域，比如机器人技术、计算生物学和数据分析。</p><p>操作系统，它是怎么处理文件系统的、如果有多项任务在同时进行，它是怎么处理的以及计算机内存是如何处理分配的。这些内容在操作系统都会讲到，你将学到很多基础知识。</p><p>数据结构，你将学到各种完成特定任务的数据结构。</p><p>图形，制作3D动画、各种特效和电影图形技术以及处理数码摄影。</p><p>处理大量数据、对网络安全有重大影响的密码学。</p><hr><h3 id="第-28-课-宣布图形比赛结果"><a href="#第-28-课-宣布图形比赛结果" class="headerlink" title="第 28 课 宣布图形比赛结果"></a>第 28 课 宣布图形比赛结果</h3><p>图形比赛，最佳算法奖是一个产生分形图的程序，你可以输入一个数学表达式来产生相应的分形图，而且可以无限放大。最佳艺术将是使用者绘出一个图片，然后可以设定颜色，产生多种颜色的图片，将屏幕铺满，最后在屏幕上每个图片会依次发生一个落下并弹起直到从屏幕上消失的动画效果，直到图片全部消失。最好的还是大众选择奖，经典的塞尔达传说。</p><p>如果程序员能下意识地认为自己是艺术家的话，他们实际上能做的更好。当你把一些东西放到一起的时候，不要认为自己正在做数学验证。能够进行逻辑分析固然很重要，但最后你实际上是把一些本身没有美感的东西，组合到了一起。这也正是计算机科学的美妙之处。</p>]]></content>
      
      
      <categories>
          
          <category> 公开课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
